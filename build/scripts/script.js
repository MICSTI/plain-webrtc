var app=angular.module("plain-webrtc",["ui.router","ngMessages"]);app.constant("AppConfig",{"log.info":!0,"log.error":!0}),app.controller("AppCtrl",["$scope","LogSrv","SocketSrv","FocusSrv","WebRTCSrv",function(n,e,t,o,c){var i={username:null},r=null,a=null,s=function(n){r=n,t.sendMessage({to:r.id,topic:"call.offer",payload:{}}),a="call.outgoing"},u=function(){t.sendMessage({to:r.id,topic:"call.withdrawn",payload:{}}),r=null,a=null},l=function(){t.sendMessage({to:r.id,topic:"call.rejected",payload:{}}),r=null,a=null},d=function(){t.sendMessage({to:r.id,topic:"call.accepted",payload:{}}),a="call.accepted",c.setRemotePeer(r)};t.connect(),n.isLoggedIn=function(){return null!==i.username},n.userObj={},n.login=function(o){o?(i.username=n.userObj.username,t.register(i.username)):e.error("Form not valid")},n.user=function(){return i},n.peers=function(){return t.getUsers()},n.getInfoMessage=function(){return a},n.getRemotePeer=function(){return r},n.callUser=s,n.withdrawCall=u,n.rejectCall=l,n.acceptCall=d,o("username"),n.$on("call.offer",function(n,e){r=t.findUserById(e.from),a="call.incoming"}),n.$on("call.withdrawn",function(n,e){r=null,a=null}),n.$on("call.rejected",function(n,e){r=null,a=null}),n.$on("call.accepted",function(n,e){a="call.accepted",c.setRemotePeer(r),c.establishConnection({initiator:!0})}),n.$on("webrtc.connected",function(n,e){}),n.$on("webrtc.disconnected",function(n,e){})}]),angular.module("plain-webrtc").factory("FocusSrv",["$timeout","$window",function(n,e){return function(t){n(function(){var n=e.document.getElementById(t);n&&n.focus()})}}]),angular.module("plain-webrtc").factory("LogSrv",["AppConfig",function(n){var e=function(){n["log.info"]&&console.log.apply(console,arguments)},t=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:e,error:t}}]),angular.module("plain-webrtc").factory("SocketSrv",["$rootScope","LogSrv",function(n,e){var t=null,o=[],c=null,i=function(e,o){t.on(e,function(){var e=arguments;n.$apply(function(){o.apply(t,e)})})},r=function(){t=io.connect(),e.info("Socket connected"),i("id",function(n){c=n}),i("users.update",function(n){a(n)}),i("msg",function(e){var t=e.topic;delete e.topic,n.$broadcast(t,e)})},a=function(n){o=n.filter(function(n){return n.id!==c})},s=function(n){t.emit("register",{username:n})},u=function(n){t.emit("msg",n)},l=function(n){var e=null;return o.forEach(function(t){t.id===n&&(e=t)}),e};return{connect:r,register:s,findUserById:l,sendMessage:u,getUsers:function(){return o}}}]),angular.module("plain-webrtc").factory("WebRTCSrv",["$rootScope","LogSrv","SocketSrv",function(n,e,t){var o=null,c=null,i=null,r=null,a={peerConnectionConfig:{iceServers:[{urls:["stun:23.21.150.121"]},{urls:["stun:stun.l.google.com:19302"]},{urls:["turn:numb.viagenie.ca?transport=udp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"},{urls:["turn:numb.viagenie.ca?transport=tcp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"}]},peerConnectionConstraints:{optional:[{DtlsSrtpKeyAgreement:!0}]},userMediaConstraints:{audio:!0,video:{width:480,height:360}}},s=function(){i=new RTCPeerConnection(a.peerConnectionConfig,a.peerConnectionConstraints),e.info("--- peer connection created ---",a.peerConnectionConfig,a.peerConnectionConstraints),i.addStream(o),e.info("--- local stream added ---"),i.onaddstream=d,i.onremovestream=f,i.oniceconnectionstatechange=p,i.onicecandidate=function(n){n.candidate&&t.sendMessage({to:r.id,topic:"webrtc.candidate",payload:{label:n.candidate.sdpMLineIndex,id:n.candidate.sdpMid,candidate:n.candidate.candidate}})},i.ondatachannel=function(n){e.info("--- data channel received ---",n.channel)}},u=function(){e.info("--- creating offer ---"),i.createOffer().then(function(n){i.setLocalDescription(n),t.sendMessage({to:r.id,topic:"webrtc.offer",payload:n})}).catch(function(n){e.error("Failed to create offer",n)})},l=function(){e.info("--- creating answer ---"),i.createAnswer().then(function(n){i.setLocalDescription(n),t.sendMessage({to:r.id,topic:"webrtc.answer",payload:n})}).catch(function(n){e.error("failed to set local description",n)})},d=function(n){e.info("--- remote stream added ---"),n.stream.getTracks().forEach(function(n){e.info("REMOTE STREAM TRACK",n)}),c=n.stream},f=function(n){e.info("--- remote stream removed ---")},p=function(t){var o=(t.srcElement||t.target).iceConnectionState;switch(o){case"connected":e.info("--- connected ---"),n.$broadcast("webrtc.connected");break;case"closed":e.info("--- closed ---");break;case"disconnected":e.info("--- disconnected ---"),n.$broadcast("webrtc.disconnected"),m();break;case"failed":e.error("--- failed ---",t),m();break;default:e.info("--- ICE connection state change ---",o)}},g=function(n){return new Promise(function(n,t){navigator.mediaDevices.getUserMedia(a.userMediaConstraints).then(function(t){o=t,e.info("--- got media access ---",a.userMediaConstraints),n(o)}).catch(function(n){e.error("Failed to obtain media access for options",a.userMediaConstraints,n),t(n)})})},m=function(){return new Promise(function(n,e){null===o&&n();var t=o.getTracks();t.forEach(function(n){n.stop()}),o=null,n()})},C=function(n){g().then(function(){t.sendMessage({to:r.id,topic:"webrtc.init",payload:{}}),s()}).catch(function(n){})},w=function(n){r=n};return n.$on("webrtc.init",function(n,t){e.info("--- received WebRTC init ---"),g().then(function(){s(),u()}).catch(function(n){})}),n.$on("webrtc.offer",function(n,t){e.info("--- received offer ---",t),i.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){e.info("--- set remote description ---"),l()}).catch(function(n){e.error("failed to set remote description",n)})}),n.$on("webrtc.answer",function(n,t){e.info("--- received answer ---",t),i.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){e.info("--- set remote description ---")}).catch(function(n){e.error("failed to set remote description",n)})}),n.$on("webrtc.candidate",function(n,t){i.remoteDescription&&i.addIceCandidate(new RTCIceCandidate(t.payload)).then(function(){e.info("--- added ICE candidate ---")}).catch(function(n){e.error("failed to add ICE candidate",n)})}),{init:s,establishConnection:C,setRemotePeer:w}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNlcnZpY2VzL2ZvY3VzLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9sb2cuc2VydmljZS5qcyIsInNlcnZpY2VzL3NvY2tldC5pby5jbGllbnQuc2VydmljZS5qcyIsInNlcnZpY2VzL3dlYnJ0Yy5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsImxvZy5pbmZvIiwibG9nLmVycm9yIiwiY29udHJvbGxlciIsIiRzY29wZSIsIkxvZ1NydiIsIlNvY2tldFNydiIsIkZvY3VzU3J2IiwiV2ViUlRDU3J2IiwidXNlciIsInVzZXJuYW1lIiwicmVtb3RlUGVlciIsInVpTWVzc2FnZSIsImNhbGxVc2VyIiwiX3JlbW90ZVBlZXIiLCJzZW5kTWVzc2FnZSIsInRvIiwiaWQiLCJ0b3BpYyIsInBheWxvYWQiLCJ3aXRoZHJhd0NhbGwiLCJyZWplY3RDYWxsIiwiYWNjZXB0Q2FsbCIsInNldFJlbW90ZVBlZXIiLCJjb25uZWN0IiwiaXNMb2dnZWRJbiIsInVzZXJPYmoiLCJsb2dpbiIsImlzVmFsaWQiLCJyZWdpc3RlciIsImVycm9yIiwicGVlcnMiLCJnZXRVc2VycyIsImdldEluZm9NZXNzYWdlIiwiZ2V0UmVtb3RlUGVlciIsIiRvbiIsImV2ZW50IiwiZGF0YSIsImZpbmRVc2VyQnlJZCIsImZyb20iLCJlc3RhYmxpc2hDb25uZWN0aW9uIiwiaW5pdGlhdG9yIiwiZmFjdG9yeSIsIiR0aW1lb3V0IiwiJHdpbmRvdyIsImVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZm9jdXMiLCJBcHBDb25maWciLCJsb2dJbmZvIiwiY29uc29sZSIsImxvZyIsImFwcGx5IiwiYXJndW1lbnRzIiwibG9nRXJyb3IiLCJpbmZvIiwiJHJvb3RTY29wZSIsInNvY2tldCIsInVzZXJzIiwib3duSWQiLCJvbiIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwiYXJncyIsIiRhcHBseSIsImlvIiwicGFyc2VVc2VyQXJyYXkiLCIkYnJvYWRjYXN0IiwiX3VzZXJzIiwiZmlsdGVyIiwiZW1pdCIsIm1lc3NhZ2UiLCJmb3JFYWNoIiwidSIsImxvY2FsU3RyZWFtIiwicmVtb3RlU3RyZWFtIiwicGVlckNvbm5lY3Rpb24iLCJjb25maWciLCJwZWVyQ29ubmVjdGlvbkNvbmZpZyIsImljZVNlcnZlcnMiLCJ1cmxzIiwiY3JlZGVudGlhbCIsInBlZXJDb25uZWN0aW9uQ29uc3RyYWludHMiLCJvcHRpb25hbCIsIkR0bHNTcnRwS2V5QWdyZWVtZW50IiwidXNlck1lZGlhQ29uc3RyYWludHMiLCJhdWRpbyIsInZpZGVvIiwid2lkdGgiLCJoZWlnaHQiLCJpbml0IiwiUlRDUGVlckNvbm5lY3Rpb24iLCJhZGRTdHJlYW0iLCJvbmFkZHN0cmVhbSIsImhhbmRsZVJlbW90ZVN0cmVhbUFkZGVkIiwib25yZW1vdmVzdHJlYW0iLCJoYW5kbGVSZW1vdGVTdHJlYW1SZW1vdmVkIiwib25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UiLCJoYW5kbGVJY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UiLCJvbmljZWNhbmRpZGF0ZSIsImNhbmRpZGF0ZSIsImxhYmVsIiwic2RwTUxpbmVJbmRleCIsInNkcE1pZCIsIm9uZGF0YWNoYW5uZWwiLCJjaGFubmVsIiwib2ZmZXIiLCJjcmVhdGVPZmZlciIsInRoZW4iLCJzZXNzaW9uRGVzY3JpcHRpb24iLCJzZXRMb2NhbERlc2NyaXB0aW9uIiwiY2F0Y2giLCJlcnIiLCJhbnN3ZXIiLCJjcmVhdGVBbnN3ZXIiLCJzdHJlYW0iLCJnZXRUcmFja3MiLCJ0cmFjayIsInN0YXRlIiwic3JjRWxlbWVudCIsInRhcmdldCIsImljZUNvbm5lY3Rpb25TdGF0ZSIsInJlbGVhc2VNZWRpYUFjY2VzcyIsInJlcXVlc3RNZWRpYUFjY2VzcyIsIm9wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImdldFVzZXJNZWRpYSIsIm1lZGlhU3RyZWFtIiwidHJhY2tzIiwic3RvcCIsInBlZXIiLCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsIlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiIsInJlbW90ZURlc2NyaXB0aW9uIiwiYWRkSWNlQ2FuZGlkYXRlIiwiUlRDSWNlQ2FuZGlkYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLGdCQUNBLFlBQ0EsY0FJQUYsS0FBQUcsU0FBQSxhQUNBQyxZQUFBLEVBQ0FDLGFBQUEsSUFHQUwsSUFBQU0sV0FBQSxXQUFBLFNBQUEsU0FBQSxZQUFBLFdBQUEsWUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUFDLElBQ0FDLFNBQUEsTUFHQUMsRUFBQSxLQUNBQyxFQUFBLEtBRUFDLEVBQUEsU0FBQUMsR0FDQUgsRUFBQUcsRUFHQVIsRUFBQVMsYUFDQUMsR0FBQUwsRUFBQU0sR0FDQUMsTUFBQSxhQUNBQyxhQU1BUCxFQUFBLGlCQUdBUSxFQUFBLFdBRUFkLEVBQUFTLGFBQ0FDLEdBQUFMLEVBQUFNLEdBQ0FDLE1BQUEsaUJBQ0FDLGFBTUFSLEVBQUEsS0FHQUMsRUFBQSxNQUdBUyxFQUFBLFdBRUFmLEVBQUFTLGFBQ0FDLEdBQUFMLEVBQUFNLEdBQ0FDLE1BQUEsZ0JBQ0FDLGFBTUFSLEVBQUEsS0FHQUMsRUFBQSxNQUdBVSxFQUFBLFdBRUFoQixFQUFBUyxhQUNBQyxHQUFBTCxFQUFBTSxHQUNBQyxNQUFBLGdCQUNBQyxhQU1BUCxFQUFBLGdCQUdBSixFQUFBZSxjQUFBWixHQUlBTCxHQUFBa0IsVUFHQXBCLEVBQUFxQixXQUFBLFdBQ0EsTUFBQSxRQUFBaEIsRUFBQUMsVUFHQU4sRUFBQXNCLFdBRUF0QixFQUFBdUIsTUFBQSxTQUFBQyxHQUNBQSxHQUNBbkIsRUFBQUMsU0FBQU4sRUFBQXNCLFFBQUFoQixTQUdBSixFQUFBdUIsU0FBQXBCLEVBQUFDLFdBRUFMLEVBQUF5QixNQUFBLG1CQUlBMUIsRUFBQUssS0FBQSxXQUNBLE1BQUFBLElBR0FMLEVBQUEy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QUEsU0FBQXFGLEdBQ0FELElBQ0FmLEtBQUEsV0FFQXZHLEVBQUFTLGFBQ0FDLEdBQUFMLEVBQUFNLEdBQ0FDLE1BQUEsY0FDQUMsYUFNQXdFLE1BRUFxQixNQUFBLFNBQUFDLE9BS0ExRixFQUFBLFNBQUFnSCxHQUNBNUgsRUFBQTRILEVBMERBLE9BdkRBOUUsR0FBQXRCLElBQUEsY0FBQSxTQUFBQyxFQUFBQyxHQUNBaEMsRUFBQW1ELEtBQUEsZ0NBRUFvRSxJQUNBZixLQUFBLFdBRUFsQixJQUdBZ0IsTUFFQUssTUFBQSxTQUFBQyxRQUtBeEQsRUFBQXRCLElBQUEsZUFBQSxTQUFBQyxFQUFBQyxHQUNBaEMsRUFBQW1ELEtBQUEseUJBQUFuQixHQUVBd0MsRUFBQTJELHFCQUFBLEdBQUFDLHVCQUFBcEcsRUFBQWxCLFVBQ0EwRixLQUFBLFdBQ0F4RyxFQUFBbUQsS0FBQSxrQ0FHQTBELE1BRUFGLE1BQUEsU0FBQUMsR0FDQTVHLEVBQUF5QixNQUFBLG1DQUFBbUYsT0FJQXhELEVBQUF0QixJQUFBLGdCQUFBLFNBQUFDLEVBQUFDLEdBQ0FoQyxFQUFBbUQsS0FBQSwwQkFBQW5CLEdBRUF3QyxFQUFBMkQscUJBQUEsR0FBQUMsdUJBQUFwRyxFQUFBbEIsVUFDQTBGLEtBQUEsV0FDQXhHLEVBQUFtRCxLQUFBLG9DQUVBd0QsTUFBQSxTQUFBQyxHQUNBNUcsRUFBQXlCLE1BQUEsbUNBQUFtRixPQUlBeEQsRUFBQXRCLElBQUEsbUJBQUEsU0FBQUMsRUFBQUMsR0FDQXdDLEVBQUE2RCxtQkFDQTdELEVBQUE4RCxnQkFBQSxHQUFBQyxpQkFBQXZHLEVBQUFsQixVQUNBMEYsS0FBQSxXQUNBeEcsRUFBQW1ELEtBQUEsaUNBRUF3RCxNQUFBLFNBQUFDLEdBQ0E1RyxFQUFBeUIsTUFBQSw4QkFBQW1GLFFBTUF0QixLQUFBQSxFQUNBbkQsb0JBQUFBLEVBQ0FqQixjQUFBQSIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJwbGFpbi13ZWJydGNcIiwgW1xyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdNZXNzYWdlcydcclxuXSk7XHJcblxyXG4vLyBkZWZpbmUgYXBwbGljYXRpb24gY29uc3RhbnRzXHJcbmFwcC5jb25zdGFudChcIkFwcENvbmZpZ1wiLCB7XHJcbiAgICBcImxvZy5pbmZvXCI6IHRydWUsXHJcbiAgICBcImxvZy5lcnJvclwiOiB0cnVlXHJcbn0pO1xyXG5cclxuYXBwLmNvbnRyb2xsZXIoXCJBcHBDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSwgTG9nU3J2LCBTb2NrZXRTcnYsIEZvY3VzU3J2LCBXZWJSVENTcnYpIHtcclxuICAgIC8vIC0tLS0tLS0tLS0tIEFwcCBjb25maWcgLS0tLS0tLS0tLS0tXHJcbiAgICB2YXIgdXNlciA9IHtcclxuICAgICAgICB1c2VybmFtZTogbnVsbFxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVtb3RlUGVlciA9IG51bGw7XHJcbiAgICB2YXIgdWlNZXNzYWdlID0gbnVsbDtcclxuXHJcbiAgICB2YXIgY2FsbFVzZXIgPSBmdW5jdGlvbihfcmVtb3RlUGVlcikge1xyXG4gICAgICAgIHJlbW90ZVBlZXIgPSBfcmVtb3RlUGVlcjtcclxuXHJcbiAgICAgICAgLy8gc2VuZCBjYWxsIG1lc3NhZ2UgdG8gcmVtb3RlIHBlZXJcclxuICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgdG9waWM6ICdjYWxsLm9mZmVyJyxcclxuICAgICAgICAgICAgcGF5bG9hZDoge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzZXQgVUkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9ICdjYWxsLm91dGdvaW5nJztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHdpdGhkcmF3Q2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIHNlbmQgc29ja2V0IG1lc3NhZ2VcclxuICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgdG9waWM6ICdjYWxsLndpdGhkcmF3bicsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gcmVzZXQgcmVtb3RlIHBlZXJcclxuICAgICAgICByZW1vdGVQZWVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gc2V0IFVJIG1lc3NhZ2VcclxuICAgICAgICB1aU1lc3NhZ2UgPSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVqZWN0Q2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIHNlbmQgc29ja2V0IG1lc3NhZ2VcclxuICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgdG9waWM6ICdjYWxsLnJlamVjdGVkJyxcclxuICAgICAgICAgICAgcGF5bG9hZDoge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyByZXNldCByZW1vdGUgcGVlclxyXG4gICAgICAgIHJlbW90ZVBlZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBzZXQgVUkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9IG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBhY2NlcHRDYWxsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gc2VuZCBzb2NrZXQgbWVzc2FnZVxyXG4gICAgICAgIFNvY2tldFNydi5zZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgIHRvOiByZW1vdGVQZWVyLmlkLFxyXG4gICAgICAgICAgICB0b3BpYzogJ2NhbGwuYWNjZXB0ZWQnLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiB7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNldCBVSSBtZXNzYWdlXHJcbiAgICAgICAgdWlNZXNzYWdlID0gJ2NhbGwuYWNjZXB0ZWQnO1xyXG5cclxuICAgICAgICAvLyBzZXQgcmVtb3RlIHBlZXIgaW4gV2ViUlRDIHNlcnZpY2VcclxuICAgICAgICBXZWJSVENTcnYuc2V0UmVtb3RlUGVlcihyZW1vdGVQZWVyKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gQXBwIGluaXRpYWxpemF0aW9uIC0tLS0tLS0tLS0tLVxyXG4gICAgU29ja2V0U3J2LmNvbm5lY3QoKTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLSBTY29wZSBtZXRob2RzIC0tLS0tLS0tLS0tLVxyXG4gICAgJHNjb3BlLmlzTG9nZ2VkSW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdXNlci51c2VybmFtZSAhPT0gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnVzZXJPYmogPSB7fTtcclxuXHJcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbihpc1ZhbGlkKSB7XHJcbiAgICAgICAgaWYgKGlzVmFsaWQpIHtcclxuICAgICAgICAgICAgdXNlci51c2VybmFtZSA9ICRzY29wZS51c2VyT2JqLnVzZXJuYW1lO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVnaXN0ZXIgdXNlcm5hbWUgd2l0aCBzb2NrZXQgc2VydmljZVxyXG4gICAgICAgICAgICBTb2NrZXRTcnYucmVnaXN0ZXIodXNlci51c2VybmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgTG9nU3J2LmVycm9yKCdGb3JtIG5vdCB2YWxpZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnVzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnBlZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFNvY2tldFNydi5nZXRVc2VycygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0SW5mb01lc3NhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdWlNZXNzYWdlO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0UmVtb3RlUGVlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiByZW1vdGVQZWVyO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuY2FsbFVzZXIgPSBjYWxsVXNlcjtcclxuICAgICRzY29wZS53aXRoZHJhd0NhbGwgPSB3aXRoZHJhd0NhbGw7XHJcbiAgICAkc2NvcGUucmVqZWN0Q2FsbCA9IHJlamVjdENhbGw7XHJcbiAgICAkc2NvcGUuYWNjZXB0Q2FsbCA9IGFjY2VwdENhbGw7XHJcblxyXG4gICAgRm9jdXNTcnYoJ3VzZXJuYW1lJyk7XHJcblxyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tIEV2ZW50IGhhbmRsaW5nIC0tLS0tLS0tLS0tLVxyXG4gICAgJHNjb3BlLiRvbignY2FsbC5vZmZlcicsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgLy8gbG9vayB1cCB1c2VyXHJcbiAgICAgICAgcmVtb3RlUGVlciA9IFNvY2tldFNydi5maW5kVXNlckJ5SWQoZGF0YS5mcm9tKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHVpIG1lc3NhZ2VcclxuICAgICAgICB1aU1lc3NhZ2UgPSAnY2FsbC5pbmNvbWluZyc7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdjYWxsLndpdGhkcmF3bicsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgLy8gcmVzZXQgcmVtb3RlIHBlZXJcclxuICAgICAgICByZW1vdGVQZWVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gc2V0IHVpIG1lc3NhZ2VcclxuICAgICAgICB1aU1lc3NhZ2UgPSBudWxsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbignY2FsbC5yZWplY3RlZCcsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgLy8gcmVzZXQgcmVtb3RlIHBlZXJcclxuICAgICAgICByZW1vdGVQZWVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gc2V0IHVpIG1lc3NhZ2VcclxuICAgICAgICB1aU1lc3NhZ2UgPSBudWxsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbignY2FsbC5hY2NlcHRlZCcsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgLy8gc2V0IHVpIG1lc3NhZ2VcclxuICAgICAgICB1aU1lc3NhZ2UgPSAnY2FsbC5hY2NlcHRlZCc7XHJcblxyXG4gICAgICAgIC8vIHNldCByZW1vdGUgcGVlciBpbiBXZWJSVEMgc2VydmljZVxyXG4gICAgICAgIFdlYlJUQ1Nydi5zZXRSZW1vdGVQZWVyKHJlbW90ZVBlZXIpO1xyXG5cclxuICAgICAgICAvLyBlc3RhYmxpc2ggV2ViUlRDIGNvbm5lY3Rpb25cclxuICAgICAgICBXZWJSVENTcnYuZXN0YWJsaXNoQ29ubmVjdGlvbih7XHJcbiAgICAgICAgICAgIGluaXRpYXRvcjogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbignd2VicnRjLmNvbm5lY3RlZCcsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgXHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCd3ZWJydGMuZGlzY29ubmVjdGVkJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuXHJcbiAgICB9KTtcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGxhaW4td2VicnRjJylcclxuICAgIC5mYWN0b3J5KCdGb2N1c1NydicsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkd2luZG93KSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIC8vIHRpbWVvdXQgbWFrZXMgc3VyZSB0aGF0IGlzIGludm9rZWQgYWZ0ZXIgYW55IG90aGVyIGV2ZW50IGhhcyBiZWVuIHRyaWdnZXJlZC5cclxuICAgICAgICAgICAgLy8gZS5nLiBjbGljayBldmVudHMgdGhhdCBuZWVkIHRvIHJ1biBiZWZvcmUgdGhlIGZvY3VzIG9yXHJcbiAgICAgICAgICAgIC8vIGlucHV0cyBlbGVtZW50cyB0aGF0IGFyZSBpbiBhIGRpc2FibGVkIHN0YXRlIGJ1dCBhcmUgZW5hYmxlZCB3aGVuIHRob3NlIGV2ZW50c1xyXG4gICAgICAgICAgICAvLyBhcmUgdHJpZ2dlcmVkLlxyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gJHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwbGFpbi13ZWJydGMnKVxyXG4gICAgLmZhY3RvcnkoJ0xvZ1NydicsIGZ1bmN0aW9uKEFwcENvbmZpZykge1xyXG4gICAgICAgIHZhciBsb2dJbmZvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChBcHBDb25maWdbXCJsb2cuaW5mb1wiXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoQXBwQ29uZmlnW1wibG9nLmVycm9yXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbmZvOiBsb2dJbmZvLFxyXG4gICAgICAgICAgICBlcnJvcjogbG9nRXJyb3JcclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgncGxhaW4td2VicnRjJylcbiAgICAuZmFjdG9yeSgnU29ja2V0U3J2JywgZnVuY3Rpb24oJHJvb3RTY29wZSwgTG9nU3J2KSB7XG4gICAgICAgIHZhciBzb2NrZXQgPSBudWxsO1xuICAgICAgICB2YXIgdXNlcnMgPSBbXTtcbiAgICAgICAgdmFyIG93bklkID0gbnVsbDtcblxuICAgICAgICB2YXIgb24gPSBmdW5jdGlvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzb2NrZXQub24oZXZlbnROYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShzb2NrZXQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzb2NrZXQuZW1pdChldmVudE5hbWUsIGRhdGEsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoc29ja2V0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNvbm5lY3QgdG8gU29ja2V0LmlvIHNlcnZlclxuICAgICAgICAgICAgc29ja2V0ID0gaW8uY29ubmVjdCgpO1xuXG4gICAgICAgICAgICBMb2dTcnYuaW5mbygnU29ja2V0IGNvbm5lY3RlZCcpO1xuXG4gICAgICAgICAgICBvbignaWQnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgb3duSWQgPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9uKCd1c2Vycy51cGRhdGUnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VVc2VyQXJyYXkoZGF0YSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb24oJ21zZycsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9waWMgPSBkYXRhLnRvcGljO1xuXG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEudG9waWM7XG5cbiAgICAgICAgICAgICAgICAvLyBwdWJsaXNoIHJlbGF5IG1lc3NhZ2Ugb24gcm9vdCBzY29wZVxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCh0b3BpYywgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcGFyc2VVc2VyQXJyYXkgPSBmdW5jdGlvbihfdXNlcnMpIHtcbiAgICAgICAgICAgIHVzZXJzID0gX3VzZXJzLmZpbHRlcihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXIuaWQgIT09IG93bklkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdyZWdpc3RlcicsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdtc2cnLCBtZXNzYWdlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZmluZFVzZXJCeUlkID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHZhciB1c2VyID0gbnVsbDtcblxuICAgICAgICAgICAgdXNlcnMuZm9yRWFjaChmdW5jdGlvbih1KSB7XG4gICAgICAgICAgICAgICAgaWYgKHUuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXIgPSB1O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29ubmVjdDogY29ubmVjdCxcbiAgICAgICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICAgICAgICAgIGZpbmRVc2VyQnlJZDogZmluZFVzZXJCeUlkLFxuICAgICAgICAgICAgc2VuZE1lc3NhZ2U6IHNlbmRNZXNzYWdlLFxuICAgICAgICAgICAgZ2V0VXNlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdwbGFpbi13ZWJydGMnKVxyXG4gICAgLmZhY3RvcnkoJ1dlYlJUQ1NydicsIGZ1bmN0aW9uKCRyb290U2NvcGUsIExvZ1NydiwgU29ja2V0U3J2KSB7XHJcbiAgICAgICAgdmFyIGxvY2FsU3RyZWFtID0gbnVsbDtcclxuICAgICAgICB2YXIgcmVtb3RlU3RyZWFtID0gbnVsbDtcclxuICAgICAgICB2YXIgcGVlckNvbm5lY3Rpb24gPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgcmVtb3RlUGVlciA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIFNlcnZpY2UgY29uZmlndXJhdGlvblxyXG4gICAgICAgIHZhciBjb25maWcgPSB7XHJcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uQ29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IElDRSBzZXJ2ZXIgY29uZmlndXJhdGlvbiwgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSBYSVJTWVMgQVBJIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICBpY2VTZXJ2ZXJzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1widXJsc1wiOiBbXCJzdHVuOjIzLjIxLjE1MC4xMjFcIl19LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcInVybHNcIjogW1wic3R1bjpzdHVuLmwuZ29vZ2xlLmNvbToxOTMwMlwiXX0sXHJcbiAgICAgICAgICAgICAgICAgICAge1widXJsc1wiOiBbXCJ0dXJuOm51bWIudmlhZ2VuaWUuY2E/dHJhbnNwb3J0PXVkcFwiXSwgXCJ1c2VybmFtZVwiOiBcIm1pY2hhZWwuc3RpZnRlckBldm9sYXJpcy5uZXRcIiwgXCJjcmVkZW50aWFsXCI6IFwiMTV1RmJ1Q3hhektyTXpvZzJXbk1cIn0sXHJcbiAgICAgICAgICAgICAgICAgICAge1widXJsc1wiOiBbXCJ0dXJuOm51bWIudmlhZ2VuaWUuY2E/dHJhbnNwb3J0PXRjcFwiXSwgXCJ1c2VybmFtZVwiOiBcIm1pY2hhZWwuc3RpZnRlckBldm9sYXJpcy5uZXRcIiwgXCJjcmVkZW50aWFsXCI6IFwiMTV1RmJ1Q3hhektyTXpvZzJXbk1cIn1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb25Db25zdHJhaW50czoge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XCJEdGxzU3J0cEtleUFncmVlbWVudFwiOiB0cnVlfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2VyTWVkaWFDb25zdHJhaW50czoge1xyXG4gICAgICAgICAgICAgICAgYXVkaW86IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2aWRlbzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0ODAsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzNjBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKGNvbmZpZy5wZWVyQ29ubmVjdGlvbkNvbmZpZywgY29uZmlnLnBlZXJDb25uZWN0aW9uQ29uc3RyYWludHMpO1xyXG5cclxuICAgICAgICAgICAgTG9nU3J2LmluZm8oXCItLS0gcGVlciBjb25uZWN0aW9uIGNyZWF0ZWQgLS0tXCIsIGNvbmZpZy5wZWVyQ29ubmVjdGlvbkNvbmZpZywgY29uZmlnLnBlZXJDb25uZWN0aW9uQ29uc3RyYWludHMpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkU3RyZWFtKGxvY2FsU3RyZWFtKTtcclxuICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBsb2NhbCBzdHJlYW0gYWRkZWQgLS0tJyk7XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5vbmFkZHN0cmVhbSA9IGhhbmRsZVJlbW90ZVN0cmVhbUFkZGVkO1xyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5vbnJlbW92ZXN0cmVhbSA9IGhhbmRsZVJlbW90ZVN0cmVhbVJlbW92ZWQ7XHJcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24ub25pY2VjYW5kaWRhdGUgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmNhbmRpZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFNvY2tldFNydi5zZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiByZW1vdGVQZWVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BpYzogJ3dlYnJ0Yy5jYW5kaWRhdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogZXZlbnQuY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZXZlbnQuY2FuZGlkYXRlLnNkcE1pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZTogZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5vbmRhdGFjaGFubmVsID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gZGF0YSBjaGFubmVsIHJlY2VpdmVkIC0tLScsIGV2ZW50LmNoYW5uZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG9mZmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gY3JlYXRpbmcgb2ZmZXIgLS0tJyk7XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcigpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihzZXNzaW9uRGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKHNlc3Npb25EZXNjcmlwdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFNvY2tldFNydi5zZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiByZW1vdGVQZWVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BpYzogJ3dlYnJ0Yy5vZmZlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHNlc3Npb25EZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBvZmZlcicsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgYW5zd2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gY3JlYXRpbmcgYW5zd2VyIC0tLScpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uY3JlYXRlQW5zd2VyKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHNlc3Npb25EZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLnNldExvY2FsRGVzY3JpcHRpb24oc2Vzc2lvbkRlc2NyaXB0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgU29ja2V0U3J2LnNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHJlbW90ZVBlZXIuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcGljOiAnd2VicnRjLmFuc3dlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHNlc3Npb25EZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBzZXQgbG9jYWwgZGVzY3JpcHRpb24nLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZVJlbW90ZVN0cmVhbUFkZGVkID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgTG9nU3J2LmluZm8oXCItLS0gcmVtb3RlIHN0cmVhbSBhZGRlZCAtLS1cIik7XHJcblxyXG4gICAgICAgICAgICBldmVudC5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oXCJSRU1PVEUgU1RSRUFNIFRSQUNLXCIsIHRyYWNrKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBzYXZlIHJlbW90ZSBzdHJlYW0gcmVmZXJlbmNlXHJcbiAgICAgICAgICAgIHJlbW90ZVN0cmVhbSA9IGV2ZW50LnN0cmVhbTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlUmVtb3RlU3RyZWFtUmVtb3ZlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKFwiLS0tIHJlbW90ZSBzdHJlYW0gcmVtb3ZlZCAtLS1cIik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IChldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50LnRhcmdldCkuaWNlQ29ubmVjdGlvblN0YXRlOyAgLy8gYmVjYXVzZSBvZiBkaWZmZXJlbmNlcyBiZXR3ZWVuIENocm9tZSBhbmQgRmlyZWZveFxyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY29ubmVjdGVkJzpcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIGNvbm5lY3RlZCAtLS0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3ZWJydGMuY29ubmVjdGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBjbG9zZWQgLS0tJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2Nvbm5lY3RlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBkaXNjb25uZWN0ZWQgLS0tJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd2VicnRjLmRpc2Nvbm5lY3RlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyByZWxlYXNlIG1lZGlhIGFjY2VzcyAocmV0dXJucyBhIHByb21pc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZU1lZGlhQWNjZXNzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKCctLS0gZmFpbGVkIC0tLScsIGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVsZWFzZSBtZWRpYSBhY2Nlc3MgKHJldHVybnMgYSBwcm9taXNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlbGVhc2VNZWRpYUFjY2VzcygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gSUNFIGNvbm5lY3Rpb24gc3RhdGUgY2hhbmdlIC0tLScsIHN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciByZXF1ZXN0TWVkaWFBY2Nlc3MgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvclxyXG4gICAgICAgICAgICAgICAgICAgIC5tZWRpYURldmljZXNcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0VXNlck1lZGlhKGNvbmZpZy51c2VyTWVkaWFDb25zdHJhaW50cylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihtZWRpYVN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0cmVhbSA9IG1lZGlhU3RyZWFtO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oXCItLS0gZ290IG1lZGlhIGFjY2VzcyAtLS1cIiwgY29uZmlnLnVzZXJNZWRpYUNvbnN0cmFpbnRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobG9jYWxTdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ0ZhaWxlZCB0byBvYnRhaW4gbWVkaWEgYWNjZXNzIGZvciBvcHRpb25zJywgY29uZmlnLnVzZXJNZWRpYUNvbnN0cmFpbnRzLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlbGVhc2VNZWRpYUFjY2VzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXNvbHZlIHByb21pc2UgaW1tZWRpYXRlbHkgaWYgbWVkaWEgYWNjZXNzIGhhcyBhbHJlYWR5IGJlZW4gcmVsZWFzZWRcclxuICAgICAgICAgICAgICAgIGlmIChsb2NhbFN0cmVhbSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2tzID0gbG9jYWxTdHJlYW0uZ2V0VHJhY2tzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJhY2tzLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFjay5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0cmVhbSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZXN0YWJsaXNoQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmVxdWVzdE1lZGlhQWNjZXNzKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbmQgaW5pdCBtZXNzYWdlIHRvIHJlbW90ZSBwZWVyXHJcbiAgICAgICAgICAgICAgICAgICAgU29ja2V0U3J2LnNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHJlbW90ZVBlZXIuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcGljOiAnd2VicnRjLmluaXQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluaXQgcGVlciBjb25uZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdCgpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2V0UmVtb3RlUGVlciA9IGZ1bmN0aW9uKHBlZXIpIHtcclxuICAgICAgICAgICAgcmVtb3RlUGVlciA9IHBlZXI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJ3dlYnJ0Yy5pbml0JywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSByZWNlaXZlZCBXZWJSVEMgaW5pdCAtLS0nKTtcclxuXHJcbiAgICAgICAgICAgIHJlcXVlc3RNZWRpYUFjY2VzcygpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbml0IHBlZXIgY29ubmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGluaXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VuZCBzZXNzaW9uIGRlc2NyaXB0aW9uIG9mZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgb2ZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCd3ZWJydGMub2ZmZXInLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIHJlY2VpdmVkIG9mZmVyIC0tLScsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihkYXRhLnBheWxvYWQpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uIC0tLScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIGFuc3dlclxyXG4gICAgICAgICAgICAgICAgICAgIGFuc3dlcigpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uJywgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRvbignd2VicnRjLmFuc3dlcicsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gcmVjZWl2ZWQgYW5zd2VyIC0tLScsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihkYXRhLnBheWxvYWQpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uIC0tLScpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uJywgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRvbignd2VicnRjLmNhbmRpZGF0ZScsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChwZWVyQ29ubmVjdGlvbi5yZW1vdGVEZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkSWNlQ2FuZGlkYXRlKG5ldyBSVENJY2VDYW5kaWRhdGUoZGF0YS5wYXlsb2FkKSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBhZGRlZCBJQ0UgY2FuZGlkYXRlIC0tLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBhZGQgSUNFIGNhbmRpZGF0ZScsIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5pdDogaW5pdCxcclxuICAgICAgICAgICAgZXN0YWJsaXNoQ29ubmVjdGlvbjogZXN0YWJsaXNoQ29ubmVjdGlvbixcclxuICAgICAgICAgICAgc2V0UmVtb3RlUGVlcjogc2V0UmVtb3RlUGVlclxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
