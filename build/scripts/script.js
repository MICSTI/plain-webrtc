var app=angular.module("plain-webrtc",["ui.router","ngMessages"]);app.constant("AppConfig",{"log.info":!0,"log.error":!0}),app.controller("AppCtrl",["$scope","LogSrv","SocketSrv","FocusSrv",function(n,o,r,e){var t={username:null};r.connect(),n.isLoggedIn=function(){return null!==t.username},n.userObj={},n.login=function(e){e?(t.username=n.userObj.username,o.info(t),r.register(t.username)):o.error("Form not valid")},n.user=function(){return t},n.peers=function(){return r.getUsers()},e("username")}]),angular.module("plain-webrtc").factory("FocusSrv",["$timeout","$window",function(n,o){return function(r){n(function(){var n=o.document.getElementById(r);n&&n.focus()})}}]),angular.module("plain-webrtc").factory("LogSrv",["AppConfig",function(n){var o=function(){n["log.info"]&&console.log.apply(console,arguments)},r=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:o,error:r}}]),angular.module("plain-webrtc").factory("SocketSrv",["$rootScope","LogSrv",function(n,o){var r=null,e=[],t=null,u=function(o,e){r.on(o,function(){var o=arguments;n.$apply(function(){e.apply(r,o)})})},c=function(){r=io.connect(),o.info("Socket connected"),u("id",function(n){t=n}),u("users.update",function(n){i(n)})},i=function(n){e=n.filter(function(n){return n.id!==t})},l=function(n){r.emit("register",{username:n})};return{connect:c,register:l,getUsers:function(){return e}}}]);
//# sourceMappingURL=data:application/json;base64,
