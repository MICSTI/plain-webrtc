var app=angular.module("plain-webrtc",["ui.router","ngMessages"]);app.constant("AppConfig",{"log.info":!0,"log.error":!0}),app.controller("AppCtrl",["$scope","LogSrv","SocketSrv","FocusSrv","WebRTCSrv",function(n,e,t,o,c){var i={username:null},r=null,a=null,l=function(n){r=n,t.sendMessage({to:r.id,topic:"call.offer",payload:{}}),a="call.outgoing"},s=function(){t.sendMessage({to:r.id,topic:"call.withdrawn",payload:{}}),r=null,a=null},u=function(){t.sendMessage({to:r.id,topic:"call.rejected",payload:{}}),r=null,a=null},d=function(){t.sendMessage({to:r.id,topic:"call.accepted",payload:{}}),a="call.accepted",c.setRemotePeer(r)},f=function(){t.sendMessage({to:r.id,topic:"call.hangup",payload:{}}),c.closeConnection()};t.connect(),n.isLoggedIn=function(){return null!==i.username},n.userObj={},n.login=function(o){o?(i.username=n.userObj.username,t.register(i.username)):e.error("Form not valid")},n.user=function(){return i},n.peers=function(){return t.getUsers()},n.getInfoMessage=function(){return a},n.getRemotePeer=function(){return r},n.callUser=l,n.withdrawCall=s,n.rejectCall=u,n.acceptCall=d,n.hangUp=f,n.isConnected=c.isConnected,o("username"),n.$on("call.offer",function(n,e){r=t.findUserById(e.from),a="call.incoming"}),n.$on("call.withdrawn",function(n,e){r=null,a=null}),n.$on("call.rejected",function(n,e){r=null,a=null}),n.$on("call.accepted",function(n,e){a="call.accepted",c.setRemotePeer(r),c.establishConnection({initiator:!0})}),n.$on("call.hangup",function(n,e){c.closeConnection()}),n.$on("webrtc.connected",function(e,t){n.$apply(function(){a=null})}),n.$on("webrtc.disconnected",function(e,t){n.$apply(function(){a=null})})}]),angular.module("plain-webrtc").controller("RealTimeVideoController",["$scope",function(n){}]),angular.module("plain-webrtc").directive("realTimeVideo",function(){return{template:'<video class="video"></video>',restrict:"E",controller:"RealTimeVideoController",link:function(n,e,t){var o,c,i=e[0].querySelector("video");i.autoplay=!0,i.srcObject=null,i.onloadedmetadata=function(){o=this.videoWidth,c=this.videoHeight},n.$on("webrtc.connected",function(n,e){i.srcObject=e.stream})}}}),angular.module("plain-webrtc").factory("FocusSrv",["$timeout","$window",function(n,e){return function(t){n(function(){var n=e.document.getElementById(t);n&&n.focus()})}}]),angular.module("plain-webrtc").factory("LogSrv",["AppConfig",function(n){var e=function(){n["log.info"]&&console.log.apply(console,arguments)},t=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:e,error:t}}]),angular.module("plain-webrtc").factory("SocketSrv",["$rootScope","LogSrv",function(n,e){var t=null,o=[],c=null,i=function(e,o){t.on(e,function(){var e=arguments;n.$apply(function(){o.apply(t,e)})})},r=function(){t=io.connect(),e.info("Socket connected"),i("id",function(n){c=n}),i("users.update",function(n){a(n)}),i("msg",function(e){var t=e.topic;delete e.topic,n.$broadcast(t,e)})},a=function(n){o=n.filter(function(n){return n.id!==c})},l=function(n){t.emit("register",{username:n})},s=function(n){t.emit("msg",n)},u=function(n){var e=null;return o.forEach(function(t){t.id===n&&(e=t)}),e};return{connect:r,register:l,findUserById:u,sendMessage:s,getUsers:function(){return o}}}]),angular.module("plain-webrtc").factory("WebRTCSrv",["$rootScope","LogSrv","SocketSrv",function(n,e,t){var o=null,c=null,i=null,r=null,a={peerConnectionConfig:{iceServers:[{urls:["stun:23.21.150.121"]},{urls:["stun:stun.l.google.com:19302"]},{urls:["turn:numb.viagenie.ca?transport=udp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"},{urls:["turn:numb.viagenie.ca?transport=tcp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"}]},peerConnectionConstraints:{optional:[{DtlsSrtpKeyAgreement:!0}]},userMediaConstraints:{audio:!0,video:{width:480,height:360}}},l=function(){i=new RTCPeerConnection(a.peerConnectionConfig,a.peerConnectionConstraints),e.info("--- peer connection created ---",a.peerConnectionConfig,a.peerConnectionConstraints),i.addStream(o),e.info("--- local stream added ---"),i.onaddstream=d,i.onremovestream=f,i.oniceconnectionstatechange=p,i.onicecandidate=function(n){n.candidate&&t.sendMessage({to:r.id,topic:"webrtc.candidate",payload:{label:n.candidate.sdpMLineIndex,id:n.candidate.sdpMid,candidate:n.candidate.candidate}})},i.ondatachannel=function(n){e.info("--- data channel received ---",n.channel)}},s=function(){e.info("--- creating offer ---"),i.createOffer().then(function(n){i.setLocalDescription(n),t.sendMessage({to:r.id,topic:"webrtc.offer",payload:n})}).catch(function(n){e.error("Failed to create offer",n)})},u=function(){e.info("--- creating answer ---"),i.createAnswer().then(function(n){i.setLocalDescription(n),t.sendMessage({to:r.id,topic:"webrtc.answer",payload:n})}).catch(function(n){e.error("failed to set local description",n)})},d=function(n){e.info("--- remote stream added ---"),n.stream.getTracks().forEach(function(n){e.info("REMOTE STREAM TRACK",n)}),c=n.stream},f=function(n){e.info("--- remote stream removed ---")},p=function(t){var o=(t.srcElement||t.target).iceConnectionState;switch(o){case"connected":e.info("--- connected ---"),n.$broadcast("webrtc.connected",{stream:c});break;case"closed":e.info("--- closed ---"),n.$broadcast("webrtc.disconnected");break;case"disconnected":e.info("--- disconnected ---"),n.$broadcast("webrtc.disconnected"),v();break;case"failed":e.error("--- failed ---",t),m();break;default:e.info("--- ICE connection state change ---",o)}},g=function(n){return new Promise(function(n,t){navigator.mediaDevices.getUserMedia(a.userMediaConstraints).then(function(t){o=t,e.info("--- got media access ---",a.userMediaConstraints),n(o)}).catch(function(n){e.error("Failed to obtain media access for options",a.userMediaConstraints,n),t(n)})})},m=function(){return new Promise(function(n,e){null===o&&n();var t=o.getTracks();t.forEach(function(n){n.stop()}),o=null,n()})},C=function(n){g().then(function(){t.sendMessage({to:r.id,topic:"webrtc.init",payload:{}}),l()}).catch(function(n){})},b=function(){null!==i&&i.close(),i=null,o=null,c=null},v=function(){null!==i&&(e.info("--- closing WebRTC connection ---"),m().then(function(){b(),h(null)}))},h=function(n){r=n},w=function(){return null!==i};return n.$on("webrtc.init",function(n,t){e.info("--- received WebRTC init ---"),g().then(function(){l(),s()}).catch(function(n){})}),n.$on("webrtc.offer",function(n,t){e.info("--- received offer ---",t),i.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){e.info("--- set remote description ---"),u()}).catch(function(n){e.error("failed to set remote description",n)})}),n.$on("webrtc.answer",function(n,t){e.info("--- received answer ---",t),i.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){e.info("--- set remote description ---")}).catch(function(n){e.error("failed to set remote description",n)})}),n.$on("webrtc.candidate",function(n,t){i.remoteDescription&&i.addIceCandidate(new RTCIceCandidate(t.payload)).then(function(){e.info("--- added ICE candidate ---")}).catch(function(n){e.error("failed to add ICE candidate",n)})}),{init:l,establishConnection:C,closeConnection:v,setRemotePeer:h,isConnected:w}}]);
//# sourceMappingURL=data:application/json;base64,
