var app=angular.module("plain-webrtc",["ui.router","ngMessages"]);app.constant("AppConfig",{"log.info":!0,"log.error":!0}),app.controller("AppCtrl",["$scope","LogSrv","SocketSrv","FocusSrv","WebRTCSrv",function(e,n,t,o,i){var c={username:null},r=null,a=null,l=function(e){r=e,t.sendMessage({to:r.id,topic:"call.offer",payload:{}}),a="call.outgoing"},s=function(){t.sendMessage({to:r.id,topic:"call.withdrawn",payload:{}}),r=null,a=null},u=function(){t.sendMessage({to:r.id,topic:"call.rejected",payload:{}}),r=null,a=null},d=function(){t.sendMessage({to:r.id,topic:"call.accepted",payload:{}}),a="call.accepted",i.setRemotePeer(r)};t.connect(),e.isLoggedIn=function(){return null!==c.username},e.userObj={},e.login=function(o){o?(c.username=e.userObj.username,t.register(c.username)):n.error("Form not valid")},e.user=function(){return c},e.peers=function(){return t.getUsers()},e.getInfoMessage=function(){return a},e.getRemotePeer=function(){return r},e.callUser=l,e.withdrawCall=s,e.rejectCall=u,e.acceptCall=d,e.isConnected=i.isConnected,o("username"),e.$on("call.offer",function(e,n){r=t.findUserById(n.from),a="call.incoming"}),e.$on("call.withdrawn",function(e,n){r=null,a=null}),e.$on("call.rejected",function(e,n){r=null,a=null}),e.$on("call.accepted",function(e,n){a="call.accepted",i.setRemotePeer(r),i.establishConnection({initiator:!0})}),e.$on("webrtc.connected",function(n,t){e.$apply(function(){a=null})}),e.$on("webrtc.disconnected",function(e,n){})}]),angular.module("plain-webrtc").controller("RealTimeVideoController",["$scope",function(e){}]),angular.module("plain-webrtc").directive("realTimeVideo",function(){return{template:'<video class="video"></video>',restrict:"E",controller:"RealTimeVideoController",link:function(e,n,t){var o,i,c=n[0].querySelector("video");c.autoplay=!0,c.srcObject=null,c.onloadedmetadata=function(){o=this.videoWidth,i=this.videoHeight},e.$on("webrtc.connected",function(e,n){c.srcObject=n.stream})}}}),angular.module("plain-webrtc").factory("FocusSrv",["$timeout","$window",function(e,n){return function(t){e(function(){var e=n.document.getElementById(t);e&&e.focus()})}}]),angular.module("plain-webrtc").factory("LogSrv",["AppConfig",function(e){var n=function(){e["log.info"]&&console.log.apply(console,arguments)},t=function(){e["log.error"]&&console.error.apply(console,arguments)};return{info:n,error:t}}]),angular.module("plain-webrtc").factory("SocketSrv",["$rootScope","LogSrv",function(e,n){var t=null,o=[],i=null,c=function(n,o){t.on(n,function(){var n=arguments;e.$apply(function(){o.apply(t,n)})})},r=function(){t=io.connect(),n.info("Socket connected"),c("id",function(e){i=e}),c("users.update",function(e){a(e)}),c("msg",function(n){var t=n.topic;delete n.topic,e.$broadcast(t,n)})},a=function(e){o=e.filter(function(e){return e.id!==i})},l=function(e){t.emit("register",{username:e})},s=function(e){t.emit("msg",e)},u=function(e){var n=null;return o.forEach(function(t){t.id===e&&(n=t)}),n};return{connect:r,register:l,findUserById:u,sendMessage:s,getUsers:function(){return o}}}]),angular.module("plain-webrtc").factory("WebRTCSrv",["$rootScope","LogSrv","SocketSrv",function(e,n,t){var o=null,i=null,c=null,r=null,a={peerConnectionConfig:{iceServers:[{urls:["stun:23.21.150.121"]},{urls:["stun:stun.l.google.com:19302"]},{urls:["turn:numb.viagenie.ca?transport=udp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"},{urls:["turn:numb.viagenie.ca?transport=tcp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"}]},peerConnectionConstraints:{optional:[{DtlsSrtpKeyAgreement:!0}]},userMediaConstraints:{audio:!0,video:{width:480,height:360}}},l=function(){c=new RTCPeerConnection(a.peerConnectionConfig,a.peerConnectionConstraints),n.info("--- peer connection created ---",a.peerConnectionConfig,a.peerConnectionConstraints),c.addStream(o),n.info("--- local stream added ---"),c.onaddstream=d,c.onremovestream=f,c.oniceconnectionstatechange=p,c.onicecandidate=function(e){e.candidate&&t.sendMessage({to:r.id,topic:"webrtc.candidate",payload:{label:e.candidate.sdpMLineIndex,id:e.candidate.sdpMid,candidate:e.candidate.candidate}})},c.ondatachannel=function(e){n.info("--- data channel received ---",e.channel)}},s=function(){n.info("--- creating offer ---"),c.createOffer().then(function(e){c.setLocalDescription(e),t.sendMessage({to:r.id,topic:"webrtc.offer",payload:e})}).catch(function(e){n.error("Failed to create offer",e)})},u=function(){n.info("--- creating answer ---"),c.createAnswer().then(function(e){c.setLocalDescription(e),t.sendMessage({to:r.id,topic:"webrtc.answer",payload:e})}).catch(function(e){n.error("failed to set local description",e)})},d=function(e){n.info("--- remote stream added ---"),e.stream.getTracks().forEach(function(e){n.info("REMOTE STREAM TRACK",e)}),i=e.stream},f=function(e){n.info("--- remote stream removed ---")},p=function(t){var o=(t.srcElement||t.target).iceConnectionState;switch(o){case"connected":n.info("--- connected ---"),e.$broadcast("webrtc.connected",{stream:i});break;case"closed":n.info("--- closed ---");break;case"disconnected":n.info("--- disconnected ---"),e.$broadcast("webrtc.disconnected"),m();break;case"failed":n.error("--- failed ---",t),m();break;default:n.info("--- ICE connection state change ---",o)}},g=function(e){return new Promise(function(e,t){navigator.mediaDevices.getUserMedia(a.userMediaConstraints).then(function(t){o=t,n.info("--- got media access ---",a.userMediaConstraints),e(o)}).catch(function(e){n.error("Failed to obtain media access for options",a.userMediaConstraints,e),t(e)})})},m=function(){return new Promise(function(e,n){null===o&&e();var t=o.getTracks();t.forEach(function(e){e.stop()}),o=null,e()})},C=function(e){g().then(function(){t.sendMessage({to:r.id,topic:"webrtc.init",payload:{}}),l()}).catch(function(e){})},v=function(e){r=e},b=function(){return null!==c};return e.$on("webrtc.init",function(e,t){n.info("--- received WebRTC init ---"),g().then(function(){l(),s()}).catch(function(e){})}),e.$on("webrtc.offer",function(e,t){n.info("--- received offer ---",t),c.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){n.info("--- set remote description ---"),u()}).catch(function(e){n.error("failed to set remote description",e)})}),e.$on("webrtc.answer",function(e,t){n.info("--- received answer ---",t),c.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){n.info("--- set remote description ---")}).catch(function(e){n.error("failed to set remote description",e)})}),e.$on("webrtc.candidate",function(e,t){c.remoteDescription&&c.addIceCandidate(new RTCIceCandidate(t.payload)).then(function(){n.info("--- added ICE candidate ---")}).catch(function(e){n.error("failed to add ICE candidate",e)})}),{init:l,establishConnection:C,setRemotePeer:v,isConnected:b}}]);
//# sourceMappingURL=data:application/json;base64,
