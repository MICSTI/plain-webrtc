var app=angular.module("plain-webrtc",["ui.router","ngMessages"]);app.constant("AppConfig",{"log.info":!0,"log.error":!0}),app.controller("AppCtrl",["$scope","LogSrv","SocketSrv","FocusSrv","WebRTCSrv",function(n,e,t,o,c){var a={username:null},i=null,r=null,s=function(n){i=n,t.sendMessage({to:i.id,topic:"call.offer",payload:{}}),r="call.outgoing"},l=function(){t.sendMessage({to:i.id,topic:"call.withdrawn",payload:{}}),i=null,r=null},u=function(){t.sendMessage({to:i.id,topic:"call.rejected",payload:{}}),i=null,r=null},d=function(){t.sendMessage({to:i.id,topic:"call.accepted",payload:{}}),r="call.accepted",c.setRemotePeer(i)},f=function(){t.sendMessage({to:i.id,topic:"call.hangup",payload:{}}),c.closeConnection()};t.connect(),n.isLoggedIn=function(){return null!==a.username},n.userObj={},n.chat={message:"",history:[]},n.login=function(o){o?(a.username=n.userObj.username,t.register(a.username)):e.error("Form not valid")},n.user=function(){return a},n.peers=function(){return t.getUsers()},n.getInfoMessage=function(){return r},n.getRemotePeer=function(){return i},n.callUser=s,n.withdrawCall=l,n.rejectCall=u,n.acceptCall=d,n.hangUp=f,n.isConnected=c.isConnected,n.sendChatMessage=function(){var e={author:a.username,text:n.chat.message},t={topic:"chat.message",payload:e};c.sendDataChannelMessage(JSON.stringify(t)),n.chat.history.unshift(e),n.chat.message="",o("chatMessage")},n.onKeyPress=function(e){13===e.which&&n.sendChatMessage()},o("username"),n.$on("call.offer",function(n,e){i=t.findUserById(e.from),r="call.incoming"}),n.$on("call.withdrawn",function(n,e){i=null,r=null}),n.$on("call.rejected",function(n,e){i=null,r=null}),n.$on("call.accepted",function(n,e){r="call.accepted",c.setRemotePeer(i),c.establishConnection({initiator:!0})}),n.$on("call.hangup",function(n,e){c.closeConnection()}),n.$on("webrtc.connected",function(e,t){n.$apply(function(){r=null}),o("chatMessage")}),n.$on("webrtc.disconnected",function(e,t){n.$apply(function(){r=null})}),n.$on("chat.message",function(e,t){n.$apply(function(){n.chat.history.unshift(t)})})}]),angular.module("plain-webrtc").controller("RealTimeVideoController",["$scope",function(n){}]),angular.module("plain-webrtc").directive("realTimeVideo",function(){return{template:'<video class="video"></video>',restrict:"E",controller:"RealTimeVideoController",link:function(n,e,t){var o,c,a=e[0].querySelector("video");a.autoplay=!0,a.srcObject=null,a.onloadedmetadata=function(){o=this.videoWidth,c=this.videoHeight},n.$on("webrtc.connected",function(n,e){a.srcObject=e.stream})}}}),angular.module("plain-webrtc").factory("FocusSrv",["$timeout","$window",function(n,e){return function(t){n(function(){var n=e.document.getElementById(t);n&&n.focus()})}}]),angular.module("plain-webrtc").factory("LogSrv",["AppConfig",function(n){var e=function(){n["log.info"]&&console.log.apply(console,arguments)},t=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:e,error:t}}]),angular.module("plain-webrtc").factory("SocketSrv",["$rootScope","LogSrv",function(n,e){var t=null,o=[],c=null,a=function(e,o){t.on(e,function(){var e=arguments;n.$apply(function(){o.apply(t,e)})})},i=function(){t=io.connect(),e.info("Socket connected"),a("id",function(n){c=n}),a("users.update",function(n){r(n)}),a("msg",function(e){var t=e.topic;delete e.topic,n.$broadcast(t,e)})},r=function(n){o=n.filter(function(n){return n.id!==c})},s=function(n){t.emit("register",{username:n})},l=function(n){t.emit("msg",n)},u=function(n){var e=null;return o.forEach(function(t){t.id===n&&(e=t)}),e};return{connect:i,register:s,findUserById:u,sendMessage:l,getUsers:function(){return o}}}]),angular.module("plain-webrtc").factory("WebRTCSrv",["$rootScope","LogSrv","SocketSrv",function(n,e,t){var o=null,c=null,a=null,i=null,r="plain-webrtc-channel",s=null,l={peerConnectionConfig:{iceServers:[{urls:["stun:23.21.150.121"]},{urls:["stun:stun.l.google.com:19302"]},{urls:["turn:numb.viagenie.ca?transport=udp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"},{urls:["turn:numb.viagenie.ca?transport=tcp"],username:"michael.stifter@evolaris.net",credential:"15uFbuCxazKrMzog2WnM"}]},peerConnectionConstraints:{optional:[{DtlsSrtpKeyAgreement:!0}]},userMediaConstraints:{audio:!0,video:{width:480,height:360}}},u=function(){a=new RTCPeerConnection(l.peerConnectionConfig,l.peerConnectionConstraints),e.info("--- peer connection created ---",l.peerConnectionConfig,l.peerConnectionConstraints),a.addStream(o),e.info("--- local stream added ---"),a.onaddstream=p,a.onremovestream=g,a.oniceconnectionstatechange=m,a.onicecandidate=function(n){n.candidate&&t.sendMessage({to:s.id,topic:"webrtc.candidate",payload:{label:n.candidate.sdpMLineIndex,id:n.candidate.sdpMid,candidate:n.candidate.candidate}})},a.ondatachannel=function(n){e.info("--- data channel received ---",n.channel),i=n.channel,i.onopen=h,i.onmessage=C,i.onclose=h,i.onerror=function(n){e.error("data channel error",n)}}},d=function(){e.info("--- creating offer ---"),a.createOffer().then(function(n){a.setLocalDescription(n),t.sendMessage({to:s.id,topic:"webrtc.offer",payload:n})}).catch(function(n){e.error("Failed to create offer",n)})},f=function(){e.info("--- creating answer ---"),a.createAnswer().then(function(n){a.setLocalDescription(n),t.sendMessage({to:s.id,topic:"webrtc.answer",payload:n})}).catch(function(n){e.error("failed to set local description",n)})},p=function(n){e.info("--- remote stream added ---"),n.stream.getTracks().forEach(function(n){e.info("REMOTE STREAM TRACK",n)}),c=n.stream},g=function(n){e.info("--- remote stream removed ---")},m=function(t){var o=(t.srcElement||t.target).iceConnectionState;switch(o){case"connected":e.info("--- connected ---"),n.$broadcast("webrtc.connected",{stream:c});break;case"closed":e.info("--- closed ---"),n.$broadcast("webrtc.disconnected");break;case"disconnected":e.info("--- disconnected ---"),n.$broadcast("webrtc.disconnected"),M();break;case"failed":e.error("--- failed ---",t),v();break;default:e.info("--- ICE connection state change ---",o)}},h=function(){e.info("--- data channel state: "+i.readyState+" ---")},C=function(t){var o=null;try{o=JSON.parse(t.data)}catch(n){o=null}e.info("--- data channel message ---",o),n.$broadcast(o.topic,o.payload)},b=function(n){return new Promise(function(n,t){navigator.mediaDevices.getUserMedia(l.userMediaConstraints).then(function(t){o=t,e.info("--- got media access ---",l.userMediaConstraints),n(o)}).catch(function(n){e.error("Failed to obtain media access for options",l.userMediaConstraints,n),t(n)})})},v=function(){return new Promise(function(n,e){null===o&&n();var t=o.getTracks();t.forEach(function(n){n.stop()}),o=null,n()})},w=function(n){b().then(function(){t.sendMessage({to:s.id,topic:"webrtc.init",payload:{}}),u()}).catch(function(n){})},y=function(){null!==a&&a.close(),a=null,o=null,c=null},M=function(){null!==a&&(e.info("--- closing WebRTC connection ---"),v().then(function(){y(),S(null)}))},S=function(n){s=n},$=function(){return null!==a},R=function(n){null!==i&&"open"===i.readyState&&i.send(n)};return n.$on("webrtc.init",function(n,t){e.info("--- received WebRTC init ---"),b().then(function(){u();try{i=a.createDataChannel(r,{reliable:!0}),e.info("--- data channel created ---"),i.onopen=h,i.onmessage=C,i.onclose=h,i.onerror=function(n){e.error("data channel error",n)}}catch(n){e.error("failed to create data channel",n),i=null}d()}).catch(function(n){})}),n.$on("webrtc.offer",function(n,t){e.info("--- received offer ---",t),a.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){e.info("--- set remote description ---"),f()}).catch(function(n){e.error("failed to set remote description",n)})}),n.$on("webrtc.answer",function(n,t){e.info("--- received answer ---",t),a.setRemoteDescription(new RTCSessionDescription(t.payload)).then(function(){e.info("--- set remote description ---")}).catch(function(n){e.error("failed to set remote description",n)})}),n.$on("webrtc.candidate",function(n,t){a.remoteDescription&&a.addIceCandidate(new RTCIceCandidate(t.payload)).then(function(){e.info("--- added ICE candidate ---")}).catch(function(n){e.error("failed to add ICE candidate",n)})}),{init:u,establishConnection:w,closeConnection:M,setRemotePeer:S,isConnected:$,sendDataChannelMessage:R}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL3JlYWwtdGltZS12aWRlby5jb250cm9sbGVyLmpzIiwiZGlyZWN0aXZlcy92aWRlb0RpcmVjdGl2ZS5qcyIsInNlcnZpY2VzL2ZvY3VzLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9sb2cuc2VydmljZS5qcyIsInNlcnZpY2VzL3NvY2tldC5pby5jbGllbnQuc2VydmljZS5qcyIsInNlcnZpY2VzL3dlYnJ0Yy5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsImxvZy5pbmZvIiwibG9nLmVycm9yIiwiY29udHJvbGxlciIsIiRzY29wZSIsIkxvZ1NydiIsIlNvY2tldFNydiIsIkZvY3VzU3J2IiwiV2ViUlRDU3J2IiwidXNlciIsInVzZXJuYW1lIiwicmVtb3RlUGVlciIsInVpTWVzc2FnZSIsImNhbGxVc2VyIiwiX3JlbW90ZVBlZXIiLCJzZW5kTWVzc2FnZSIsInRvIiwiaWQiLCJ0b3BpYyIsInBheWxvYWQiLCJ3aXRoZHJhd0NhbGwiLCJyZWplY3RDYWxsIiwiYWNjZXB0Q2FsbCIsInNldFJlbW90ZVBlZXIiLCJoYW5nVXAiLCJjbG9zZUNvbm5lY3Rpb24iLCJjb25uZWN0IiwiaXNMb2dnZWRJbiIsInVzZXJPYmoiLCJjaGF0IiwibWVzc2FnZSIsImhpc3RvcnkiLCJsb2dpbiIsImlzVmFsaWQiLCJyZWdpc3RlciIsImVycm9yIiwicGVlcnMiLCJnZXRVc2VycyIsImdldEluZm9NZXNzYWdlIiwiZ2V0UmVtb3RlUGVlciIsImlzQ29ubmVjdGVkIiwic2VuZENoYXRNZXNzYWdlIiwibWVzc2FnZU9iaiIsImF1dGhvciIsInRleHQiLCJzZW5kRGF0YUNoYW5uZWxNZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsInVuc2hpZnQiLCJvbktleVByZXNzIiwia2V5RXZlbnQiLCJ3aGljaCIsIiRvbiIsImV2ZW50IiwiZGF0YSIsImZpbmRVc2VyQnlJZCIsImZyb20iLCJlc3RhYmxpc2hDb25uZWN0aW9uIiwiaW5pdGlhdG9yIiwiJGFwcGx5IiwiZGlyZWN0aXZlIiwidGVtcGxhdGUiLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsInZpZGVvIiwicXVlcnlTZWxlY3RvciIsImF1dG9wbGF5Iiwic3JjT2JqZWN0Iiwib25sb2FkZWRtZXRhZGF0YSIsInRoaXMiLCJzdHJlYW0iLCJmYWN0b3J5IiwiJHRpbWVvdXQiLCIkd2luZG93IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImZvY3VzIiwiQXBwQ29uZmlnIiwibG9nSW5mbyIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSIsImFyZ3VtZW50cyIsImxvZ0Vycm9yIiwiaW5mbyIsIiRyb290U2NvcGUiLCJzb2NrZXQiLCJ1c2VycyIsIm93bklkIiwib24iLCJldmVudE5hbWUiLCJjYWxsYmFjayIsImFyZ3MiLCJpbyIsInBhcnNlVXNlckFycmF5IiwiJGJyb2FkY2FzdCIsIl91c2VycyIsImZpbHRlciIsImVtaXQiLCJmb3JFYWNoIiwidSIsImxvY2FsU3RyZWFtIiwicmVtb3RlU3RyZWFtIiwicGVlckNvbm5lY3Rpb24iLCJkYXRhQ2hhbm5lbCIsImRhdGFDaGFubmVsTmFtZSIsImNvbmZpZyIsInBlZXJDb25uZWN0aW9uQ29uZmlnIiwiaWNlU2VydmVycyIsInVybHMiLCJjcmVkZW50aWFsIiwicGVlckNvbm5lY3Rpb25Db25zdHJhaW50cyIsIm9wdGlvbmFsIiwiRHRsc1NydHBLZXlBZ3JlZW1lbnQiLCJ1c2VyTWVkaWFDb25zdHJhaW50cyIsImF1ZGlvIiwid2lkdGgiLCJoZWlnaHQiLCJpbml0IiwiUlRDUGVlckNvbm5lY3Rpb24iLCJhZGRTdHJlYW0iLCJvbmFkZHN0cmVhbSIsImhhbmRsZVJlbW90ZVN0cmVhbUFkZGVkIiwib25yZW1vdmVzdHJlYW0iLCJoYW5kbGVSZW1vdGVTdHJlYW1SZW1vdmVkIiwib25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UiLCJoYW5kbGVJY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UiLCJvbmljZWNhbmRpZGF0ZSIsImNhbmRpZGF0ZSIsImxhYmVsIiwic2RwTUxpbmVJbmRleCIsInNkcE1pZCIsIm9uZGF0YWNoYW5uZWwiLCJjaGFubmVsIiwib25vcGVuIiwiaGFuZGxlRGF0YUNoYW5uZWxTdGF0ZUNoYW5nZSIsIm9ubWVzc2FnZSIsImhhbmRsZURhdGFDaGFubmVsTWVzc2FnZSIsIm9uY2xvc2UiLCJvbmVycm9yIiwiZXJyIiwib2ZmZXIiLCJjcmVhdGVPZmZlciIsInRoZW4iLCJzZXNzaW9uRGVzY3JpcHRpb24iLCJzZXRMb2NhbERlc2NyaXB0aW9uIiwiY2F0Y2giLCJhbnN3ZXIiLCJjcmVhdGVBbnN3ZXIiLCJnZXRUcmFja3MiLCJ0cmFjayIsInN0YXRlIiwic3JjRWxlbWVudCIsInRhcmdldCIsImljZUNvbm5lY3Rpb25TdGF0ZSIsImNsb3NlV2ViUlRDQ29ubmVjdGlvbiIsInJlbGVhc2VNZWRpYUFjY2VzcyIsInJlYWR5U3RhdGUiLCJwYXJzZSIsImV4IiwicmVxdWVzdE1lZGlhQWNjZXNzIiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwibWVkaWFTdHJlYW0iLCJ0cmFja3MiLCJzdG9wIiwiaGFuZ3VwIiwiY2xvc2UiLCJwZWVyIiwic2VuZCIsImNyZWF0ZURhdGFDaGFubmVsIiwicmVsaWFibGUiLCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsIlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiIsInJlbW90ZURlc2NyaXB0aW9uIiwiYWRkSWNlQ2FuZGlkYXRlIiwiUlRDSWNlQ2FuZGlkYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLGdCQUNBLFlBQ0EsY0FJQUYsS0FBQUcsU0FBQSxhQUNBQyxZQUFBLEVBQ0FDLGFBQUEsSUFHQUwsSUFBQU0sV0FBQSxXQUFBLFNBQUEsU0FBQSxZQUFBLFdBQUEsWUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUFDLElBQ0FDLFNBQUEsTUFHQUMsRUFBQSxLQUNBQyxFQUFBLEtBRUFDLEVBQUEsU0FBQUMsR0FDQUgsRUFBQUcsRUFHQVIsRUFBQVMsYUFDQUMsR0FBQUwsRUFBQU0sR0FDQUMsTUFBQSxhQUNBQyxhQU1BUCxFQUFBLGlCQUdBUSxFQUFBLFdBRUFkLEVBQUFTLGFBQ0FDLEdBQUFMLEVBQUFNLEdBQ0FDLE1BQUEsaUJBQ0FDLGFBTUFSLEVBQUEsS0FHQUMsRUFBQSxNQUdBUyxFQUFBLFdBRUFmLEVBQUFTLGFBQ0FDLEdBQUFMLEVBQUFNLEdBQ0FDLE1BQUEsZ0JBQ0FDLGFBTUFSLEVBQUEsS0FHQUMsRUFBQSxNQUdBVSxFQUFBLFdBRUFoQixFQUFBUyxhQUNBQyxHQUFBTCxFQUFBTSxHQUNBQyxNQUFBLGdCQUNBQyxhQU1BUCxFQUFBLGdCQUdBSixFQUFBZSxjQUFBWixJQUdBYSxFQUFBLFdBRUFsQixFQUFBUyxhQUNBQyxHQUFBTCxFQUFBTSxHQUNBQyxNQUFBLGNBQ0FDLGFBS0FYLEVBQUFpQixrQkFJQW5CLEdBQUFvQixVQUdBdEIsRUFBQXVCLFdBQUEsV0FDQSxNQUFBLFFBQUFsQixFQUFBQyxVQUdBTixFQUFBd0IsV0FDQXhCLEVBQUF5QixNQUNBQyxRQUFBLEdBQ0FDLFlBR0EzQixFQUFBNEIsTUFBQSxTQUFBQyxHQUNBQSxHQUNBeEIsRUFBQUMsU0FBQU4sRUFBQXdCLFFBQUFsQixTQUdBSixFQUFBNEIsU0FBQXpCLEVBQUFDLFdBRUFMLEVBQUE4QixNQUFBLG1CQUlBL0IsRUFBQUssS0FBQSxXQUNBLE1BQUFBLElBR0FMLEVBQUFnQyxNQUFBLFdBQ0EsTUFBQTlCLEdBQUErQixZQUdBakMsRUFBQWtDLGVBQUEsV0FDQSxNQUFBMUIsSUFHQVIsRUFBQW1DLGNBQUEsV0FDQSxNQUFBNUIsSUFHQVAsRUFBQVMsU0FBQUEsRUFDQVQsRUFBQWdCLGFBQUFBLEVBQ0FoQixFQUFBaUIsV0FBQUEsRUFDQWpCLEVBQUFrQixXQUFBQSxFQUNBbEIsRUFBQW9CLE9BQUFBLEVBQ0FwQixFQUFBb0MsWUFBQWhDLEVBQUFnQyxZQUNBcEMsRUFBQXFDLGdCQUFBLFdBQ0EsR0FBQUMsSUFDQUMsT0FBQWxDLEVBQUFDLFNBQ0FrQyxLQUFBeEMsRUFBQXlCLEtBQUFDLFNBR0FBLEdBQ0FaLE1BQUEsZUFDQUMsUUFBQXVCLEVBR0FsQyxHQUFBcUMsdUJBQUFDLEtBQUFDLFVBQUFqQixJQUVBMUIsRUFBQXlCLEtBQUFFLFFBQUFpQixRQUFBTixHQUVBdEMsRUFBQXlCLEtBQUFDLFFBQUEsR0FFQXZCLEVBQUEsZ0JBR0FILEVBQUE2QyxXQUFBLFNBQUFDLEdBQ0EsS0FBQUEsRUFBQUMsT0FDQS9DLEVBQUFxQyxtQkFJQWxDLEVBQUEsWUFJQUgsRUFBQWdELElBQUEsYUFBQSxTQUFBQyxFQUFBQyxHQUVBM0MsRUFBQUwsRUFBQWlELGFBQUFELEVBQUFFLE1BR0E1QyxFQUFBLGtCQUdBUixFQUFBZ0QsSUFBQSxpQkFBQSxTQUFBQyxFQUFBQyxHQUVBM0MsRUFBQSxLQUdBQyxFQUFBLE9BR0FSLEVBQUFnRCxJQUFBLGdCQUFBLFNBQUFDLEVBQUFDLEdBRUEzQyxFQUFBLEtBR0FDLEVBQUEsT0FHQVIsRUFBQWdELElBQUEsZ0JBQUEsU0FBQUMsRUFBQUMsR0FFQTFDLEVBQUEsZ0JBR0FKLEVBQUFlLGNBQUFaLEdBR0FILEVBQUFpRCxxQkFDQUMsV0FBQSxNQUlBdEQsRUFBQWdELElBQUEsY0FBQSxTQUFBQyxFQUFBQyxHQUNBOUMsRUFBQWlCLG9CQUdBckIsRUFBQWdELElBQUEsbUJBQUEsU0FBQUMsRUFBQUMsR0FDQWxELEVBQUF1RCxPQUFBLFdBRUEvQyxFQUFBLE9BR0FMLEVBQUEsaUJBR0FILEVBQUFnRCxJQUFBLHNCQUFBLFNBQUFDLEVBQUFDLEdBQ0FsRCxFQUFBdUQsT0FBQSxXQUVBL0MsRUFBQSxTQUlBUixFQUFBZ0QsSUFBQSxlQUFBLFNBQUFDLEVBQUF2QixHQUNBMUIsRUFBQXVELE9BQUEsV0FDQXZELEVBQUF5QixLQUFBRSxRQUFBaUIsUUFBQWxCLFVDMU9BaEMsUUFDQUMsT0FBQSxnQkFDQUksV0FBQSwyQkFBQSxTQUFBLFNBQUFDLE9DRkFOLFFBQ0FDLE9BQUEsZ0JBQ0E2RCxVQUFBLGdCQUFBLFdBQ0EsT0FDQUMsU0FBQSxnQ0FDQUMsU0FBQSxJQUNBM0QsV0FBQSwwQkFDQTRELEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUVBQyxHQUFBQyxFQUZBQyxFQUFBSixFQUFBLEdBQUFLLGNBQUEsUUFJQUQsR0FBQUUsVUFBQSxFQUNBRixFQUFBRyxVQUFBLEtBRUFILEVBQUFJLGlCQUFBLFdBQ0FOLEVBQUFPLEtBQUFQLFdBQ0FDLEVBQUFNLEtBQUFOLGFBR0FKLEVBQUFaLElBQUEsbUJBQUEsU0FBQUMsRUFBQUMsR0FDQWUsRUFBQUcsVUFBQWxCLEVBQUFxQixhQ3JCQTdFLFFBQ0FDLE9BQUEsZ0JBQ0E2RSxRQUFBLFlBQUEsV0FBQSxVQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQSxVQUFBN0QsR0FLQTRELEVBQUEsV0FDQSxHQUFBWixHQUFBYSxFQUFBQyxTQUFBQyxlQUFBL0QsRUFFQWdELElBQ0FBLEVBQUFnQixjQ1pBbkYsUUFDQUMsT0FBQSxnQkFDQTZFLFFBQUEsVUFBQSxZQUFBLFNBQUFNLEdBQ0EsR0FBQUMsR0FBQSxXQUNBRCxFQUFBLGFBQ0FFLFFBQUFDLElBQUFDLE1BQUFGLFFBQUFHLFlBSUFDLEVBQUEsV0FDQU4sRUFBQSxjQUNBRSxRQUFBakQsTUFBQW1ELE1BQUFGLFFBQUFHLFdBSUEsUUFDQUUsS0FBQU4sRUFDQWhELE1BQUFxRCxNQ2pCQTFGLFFBQUFDLE9BQUEsZ0JBQ0E2RSxRQUFBLGFBQUEsYUFBQSxTQUFBLFNBQUFjLEVBQUFyRixHQUNBLEdBQUFzRixHQUFBLEtBQ0FDLEtBQ0FDLEVBQUEsS0FFQUMsRUFBQSxTQUFBQyxFQUFBQyxHQUNBTCxFQUFBRyxHQUFBQyxFQUFBLFdBQ0EsR0FBQUUsR0FBQVYsU0FFQUcsR0FBQS9CLE9BQUEsV0FDQXFDLEVBQUFWLE1BQUFLLEVBQUFNLFFBaUJBdkUsRUFBQSxXQUVBaUUsRUFBQU8sR0FBQXhFLFVBRUFyQixFQUFBb0YsS0FBQSxvQkFFQUssRUFBQSxLQUFBLFNBQUF4QyxHQUNBdUMsRUFBQXZDLElBR0F3QyxFQUFBLGVBQUEsU0FBQXhDLEdBQ0E2QyxFQUFBN0MsS0FHQXdDLEVBQUEsTUFBQSxTQUFBeEMsR0FDQSxHQUFBcEMsR0FBQW9DLEVBQUFwQyxZQUVBb0MsR0FBQXBDLE1BR0F3RSxFQUFBVSxXQUFBbEYsRUFBQW9DLE1BSUE2QyxFQUFBLFNBQUFFLEdBQ0FULEVBQUFTLEVBQUFDLE9BQUEsU0FBQTdGLEdBQ0EsTUFBQUEsR0FBQVEsS0FBQTRFLEtBSUEzRCxFQUFBLFNBQUF4QixHQUNBaUYsRUFBQVksS0FBQSxZQUNBN0YsU0FBQUEsS0FJQUssRUFBQSxTQUFBZSxHQUNBNkQsRUFBQVksS0FBQSxNQUFBekUsSUFHQXlCLEVBQUEsU0FBQXRDLEdBQ0EsR0FBQVIsR0FBQSxJQVFBLE9BTkFtRixHQUFBWSxRQUFBLFNBQUFDLEdBQ0FBLEVBQUF4RixLQUFBQSxJQUNBUixFQUFBZ0csS0FJQWhHLEVBR0EsUUFDQWlCLFFBQUFBLEVBQ0FRLFNBQUFBLEVBQ0FxQixhQUFBQSxFQUNBeEMsWUFBQUEsRUFDQXNCLFNBQUEsV0FDQSxNQUFBdUQsUUN0RkE5RixRQUFBQyxPQUFBLGdCQUNBNkUsUUFBQSxhQUFBLGFBQUEsU0FBQSxZQUFBLFNBQUFjLEVBQUFyRixFQUFBQyxHQUNBLEdBQUFvRyxHQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUVBQyxFQUFBLEtBQ0FDLEVBQUEsdUJBRUFuRyxFQUFBLEtBR0FvRyxHQUNBQyxzQkFFQUMsYUFDQUMsTUFBQSx3QkFDQUEsTUFBQSxrQ0FDQUEsTUFBQSx1Q0FBQXhHLFNBQUEsK0JBQUF5RyxXQUFBLHlCQUNBRCxNQUFBLHVDQUFBeEcsU0FBQSwrQkFBQXlHLFdBQUEsMEJBR0FDLDJCQUNBQyxXQUNBQyxzQkFBQSxLQUdBQyxzQkFDQUMsT0FBQSxFQUNBbkQsT0FDQW9ELE1BQUEsSUFDQUMsT0FBQSxPQUtBQyxFQUFBLFdBQ0FmLEVBQUEsR0FBQWdCLG1CQUFBYixFQUFBQyxxQkFBQUQsRUFBQUssMkJBRUEvRyxFQUFBb0YsS0FBQSxrQ0FBQXNCLEVBQUFDLHFCQUFBRCxFQUFBSywyQkFFQVIsRUFBQWlCLFVBQUFuQixHQUNBckcsRUFBQW9GLEtBQUEsOEJBRUFtQixFQUFBa0IsWUFBQUMsRUFDQW5CLEVBQUFvQixlQUFBQyxFQUNBckIsRUFBQXNCLDJCQUFBQyxFQUVBdkIsRUFBQXdCLGVBQUEsU0FBQS9FLEdBQ0FBLEVBQUFnRixXQUNBL0gsRUFBQVMsYUFDQUMsR0FBQUwsRUFBQU0sR0FDQUMsTUFBQSxtQkFDQUMsU0FDQW1ILE1BQUFqRixFQUFBZ0YsVUFBQUUsY0FDQXRILEdBQUFvQyxFQUFBZ0YsVUFBQUcsT0FDQUgsVUFBQWhGLEVBQUFnRixVQUFBQSxjQU1BekIsRUFBQTZCLGNBQUEsU0FBQXBGLEdBQ0FoRCxFQUFBb0YsS0FBQSxnQ0FBQXBDLEVBQUFxRixTQUVBN0IsRUFBQXhELEVBQUFxRixRQUVBN0IsRUFBQThCLE9BQUFDLEVBQ0EvQixFQUFBZ0MsVUFBQUMsRUFDQWpDLEVBQUFrQyxRQUFBSCxFQUNBL0IsRUFBQW1DLFFBQUEsU0FBQUMsR0FDQTVJLEVBQUE4QixNQUFBLHFCQUFBOEcsTUFLQUMsRUFBQSxXQUNBN0ksRUFBQW9GLEtBQUEsMEJBRUFtQixFQUFBdUMsY0FDQUMsS0FBQSxTQUFBQyxHQUNBekMsRUFBQTBDLG9CQUFBRCxHQUVBL0ksRUFBQVMsYUFDQUMsR0FBQUwsRUFBQU0sR0FDQUMsTUFBQSxlQUNBQyxRQUFBa0ksTUFHQUUsTUFBQSxTQUFBTixHQUNBNUksRUFBQThCLE1BQUEseUJBQUE4RyxNQUlBTyxFQUFBLFdBQ0FuSixFQUFBb0YsS0FBQSwyQkFFQW1CLEVBQUE2QyxlQUNBTCxLQUFBLFNBQUFDLEdBQ0F6QyxFQUFBMEMsb0JBQUFELEdBRUEvSSxFQUFBUyxhQUNBQyxHQUFBTCxFQUFBTSxHQUNBQyxNQUFBLGdCQUNBQyxRQUFBa0ksTUFHQUUsTUFBQSxTQUFBTixHQUNBNUksRUFBQThCLE1BQUEsa0NBQUE4RyxNQUlBbEIsRUFBQSxTQUFBMUUsR0FDQWhELEVBQUFvRixLQUFBLCtCQUVBcEMsRUFBQXNCLE9BQUErRSxZQUFBbEQsUUFBQSxTQUFBbUQsR0FDQXRKLEVBQUFvRixLQUFBLHNCQUFBa0UsS0FJQWhELEVBQUF0RCxFQUFBc0IsUUFHQXNELEVBQUEsU0FBQTVFLEdBQ0FoRCxFQUFBb0YsS0FBQSxrQ0FHQTBDLEVBQUEsU0FBQTlFLEdBQ0EsR0FBQXVHLElBQUF2RyxFQUFBd0csWUFBQXhHLEVBQUF5RyxRQUFBQyxrQkFFQSxRQUFBSCxHQUNBLElBQUEsWUFDQXZKLEVBQUFvRixLQUFBLHFCQUVBQyxFQUFBVSxXQUFBLG9CQUNBekIsT0FBQWdDLEdBR0EsTUFFQSxLQUFBLFNBQ0F0RyxFQUFBb0YsS0FBQSxrQkFFQUMsRUFBQVUsV0FBQSxzQkFFQSxNQUVBLEtBQUEsZUFDQS9GLEVBQUFvRixLQUFBLHdCQUVBQyxFQUFBVSxXQUFBLHVCQUVBNEQsR0FFQSxNQUVBLEtBQUEsU0FDQTNKLEVBQUE4QixNQUFBLGlCQUFBa0IsR0FHQTRHLEdBRUEsTUFFQSxTQUNBNUosRUFBQW9GLEtBQUEsc0NBQUFtRSxLQUlBaEIsRUFBQSxXQUNBdkksRUFBQW9GLEtBQUEsMkJBQUFvQixFQUFBcUQsV0FBQSxTQUdBcEIsRUFBQSxTQUFBekYsR0FDQSxHQUFBdkIsR0FBQSxJQUNBLEtBQ0FBLEVBQUFnQixLQUFBcUgsTUFBQTlHLEVBQUFDLE1BQ0EsTUFBQThHLEdBQ0F0SSxFQUFBLEtBR0F6QixFQUFBb0YsS0FBQSwrQkFBQTNELEdBRUE0RCxFQUFBVSxXQUFBdEUsRUFBQVosTUFBQVksRUFBQVgsVUFHQWtKLEVBQUEsU0FBQUMsR0FDQSxNQUFBLElBQUFDLFNBQUEsU0FBQUMsRUFBQUMsR0FDQUMsVUFDQUMsYUFDQUMsYUFBQTdELEVBQUFRLHNCQUNBNkIsS0FBQSxTQUFBeUIsR0FDQW5FLEVBQUFtRSxFQUVBeEssRUFBQW9GLEtBQUEsMkJBQUFzQixFQUFBUSxzQkFFQWlELEVBQUE5RCxLQUVBNkMsTUFBQSxTQUFBTixHQUNBNUksRUFBQThCLE1BQUEsNENBQUE0RSxFQUFBUSxxQkFBQTBCLEdBQ0F3QixFQUFBeEIsUUFLQWdCLEVBQUEsV0FDQSxNQUFBLElBQUFNLFNBQUEsU0FBQUMsRUFBQUMsR0FFQSxPQUFBL0QsR0FDQThELEdBR0EsSUFBQU0sR0FBQXBFLEVBQUFnRCxXQUVBb0IsR0FBQXRFLFFBQUEsU0FBQW1ELEdBQ0FBLEVBQUFvQixTQUdBckUsRUFBQSxLQUVBOEQsT0FJQS9HLEVBQUEsU0FBQTZHLEdBQ0FELElBQ0FqQixLQUFBLFdBRUE5SSxFQUFBUyxhQUNBQyxHQUFBTCxFQUFBTSxHQUNBQyxNQUFBLGNBQ0FDLGFBTUF3RyxNQUVBNEIsTUFBQSxTQUFBTixPQUtBK0IsRUFBQSxXQUNBLE9BQUFwRSxHQUNBQSxFQUFBcUUsUUFHQXJFLEVBQUEsS0FFQUYsRUFBQSxLQUNBQyxFQUFBLE1BR0FxRCxFQUFBLFdBQ0EsT0FBQXBELElBQ0F2RyxFQUFBb0YsS0FBQSxxQ0FFQXdFLElBQ0FiLEtBQUEsV0FDQTRCLElBRUF6SixFQUFBLFVBS0FBLEVBQUEsU0FBQTJKLEdBQ0F2SyxFQUFBdUssR0FHQTFJLEVBQUEsV0FDQSxNQUFBLFFBQUFvRSxHQUdBL0QsRUFBQSxTQUFBZixHQUNBLE9BQUErRSxHQUFBLFNBQUFBLEVBQUFxRCxZQUNBckQsRUFBQXNFLEtBQUFySixHQTRFQSxPQXhFQTRELEdBQUF0QyxJQUFBLGNBQUEsU0FBQUMsRUFBQUMsR0FDQWpELEVBQUFvRixLQUFBLGdDQUVBNEUsSUFDQWpCLEtBQUEsV0FFQXpCLEdBR0EsS0FDQWQsRUFBQUQsRUFBQXdFLGtCQUFBdEUsR0FBQXVFLFVBQUEsSUFFQWhMLEVBQUFvRixLQUFBLGdDQUVBb0IsRUFBQThCLE9BQUFDLEVBQ0EvQixFQUFBZ0MsVUFBQUMsRUFDQWpDLEVBQUFrQyxRQUFBSCxFQUNBL0IsRUFBQW1DLFFBQUEsU0FBQUMsR0FDQTVJLEVBQUE4QixNQUFBLHFCQUFBOEcsSUFFQSxNQUFBbUIsR0FDQS9KLEVBQUE4QixNQUFBLGdDQUFBaUksR0FDQXZELEVBQUEsS0FJQXFDLE1BRUFLLE1BQUEsU0FBQU4sUUFLQXZELEVBQUF0QyxJQUFBLGVBQUEsU0FBQUMsRUFBQUMsR0FDQWpELEVBQUFvRixLQUFBLHlCQUFBbkMsR0FFQXNELEVBQUEwRSxxQkFBQSxHQUFBQyx1QkFBQWpJLEVBQUFuQyxVQUNBaUksS0FBQSxXQUNBL0ksRUFBQW9GLEtBQUEsa0NBR0ErRCxNQUVBRCxNQUFBLFNBQUFOLEdBQ0E1SSxFQUFBOEIsTUFBQSxtQ0FBQThHLE9BSUF2RCxFQUFBdEMsSUFBQSxnQkFBQSxTQUFBQyxFQUFBQyxHQUNBakQsRUFBQW9GLEtBQUEsMEJBQUFuQyxHQUVBc0QsRUFBQTBFLHFCQUFBLEdBQUFDLHVCQUFBakksRUFBQW5DLFVBQ0FpSSxLQUFBLFdBQ0EvSSxFQUFBb0YsS0FBQSxvQ0FFQThELE1BQUEsU0FBQU4sR0FDQTVJLEVBQUE4QixNQUFBLG1DQUFBOEcsT0FJQXZELEVBQUF0QyxJQUFBLG1CQUFBLFNBQUFDLEVBQUFDLEdBQ0FzRCxFQUFBNEUsbUJBQ0E1RSxFQUFBNkUsZ0JBQUEsR0FBQUMsaUJBQUFwSSxFQUFBbkMsVUFDQWlJLEtBQUEsV0FDQS9JLEVBQUFvRixLQUFBLGlDQUVBOEQsTUFBQSxTQUFBTixHQUNBNUksRUFBQThCLE1BQUEsOEJBQUE4RyxRQU1BdEIsS0FBQUEsRUFDQWxFLG9CQUFBQSxFQUNBaEMsZ0JBQUF1SSxFQUNBekksY0FBQUEsRUFDQWlCLFlBQUFBLEVBQ0FLLHVCQUFBQSIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJwbGFpbi13ZWJydGNcIiwgW1xyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdNZXNzYWdlcydcclxuXSk7XHJcblxyXG4vLyBkZWZpbmUgYXBwbGljYXRpb24gY29uc3RhbnRzXHJcbmFwcC5jb25zdGFudChcIkFwcENvbmZpZ1wiLCB7XHJcbiAgICBcImxvZy5pbmZvXCI6IHRydWUsXHJcbiAgICBcImxvZy5lcnJvclwiOiB0cnVlXHJcbn0pO1xyXG5cclxuYXBwLmNvbnRyb2xsZXIoXCJBcHBDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSwgTG9nU3J2LCBTb2NrZXRTcnYsIEZvY3VzU3J2LCBXZWJSVENTcnYpIHtcclxuICAgIC8vIC0tLS0tLS0tLS0tIEFwcCBjb25maWcgLS0tLS0tLS0tLS0tXHJcbiAgICB2YXIgdXNlciA9IHtcclxuICAgICAgICB1c2VybmFtZTogbnVsbFxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVtb3RlUGVlciA9IG51bGw7XHJcbiAgICB2YXIgdWlNZXNzYWdlID0gbnVsbDtcclxuXHJcbiAgICB2YXIgY2FsbFVzZXIgPSBmdW5jdGlvbihfcmVtb3RlUGVlcikge1xyXG4gICAgICAgIHJlbW90ZVBlZXIgPSBfcmVtb3RlUGVlcjtcclxuXHJcbiAgICAgICAgLy8gc2VuZCBjYWxsIG1lc3NhZ2UgdG8gcmVtb3RlIHBlZXJcclxuICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgdG9waWM6ICdjYWxsLm9mZmVyJyxcclxuICAgICAgICAgICAgcGF5bG9hZDoge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzZXQgVUkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9ICdjYWxsLm91dGdvaW5nJztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHdpdGhkcmF3Q2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIHNlbmQgc29ja2V0IG1lc3NhZ2VcclxuICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgdG9waWM6ICdjYWxsLndpdGhkcmF3bicsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gcmVzZXQgcmVtb3RlIHBlZXJcclxuICAgICAgICByZW1vdGVQZWVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gc2V0IFVJIG1lc3NhZ2VcclxuICAgICAgICB1aU1lc3NhZ2UgPSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVqZWN0Q2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIHNlbmQgc29ja2V0IG1lc3NhZ2VcclxuICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgdG9waWM6ICdjYWxsLnJlamVjdGVkJyxcclxuICAgICAgICAgICAgcGF5bG9hZDoge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyByZXNldCByZW1vdGUgcGVlclxyXG4gICAgICAgIHJlbW90ZVBlZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBzZXQgVUkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9IG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBhY2NlcHRDYWxsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gc2VuZCBzb2NrZXQgbWVzc2FnZVxyXG4gICAgICAgIFNvY2tldFNydi5zZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgIHRvOiByZW1vdGVQZWVyLmlkLFxyXG4gICAgICAgICAgICB0b3BpYzogJ2NhbGwuYWNjZXB0ZWQnLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiB7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNldCBVSSBtZXNzYWdlXHJcbiAgICAgICAgdWlNZXNzYWdlID0gJ2NhbGwuYWNjZXB0ZWQnO1xyXG5cclxuICAgICAgICAvLyBzZXQgcmVtb3RlIHBlZXIgaW4gV2ViUlRDIHNlcnZpY2VcclxuICAgICAgICBXZWJSVENTcnYuc2V0UmVtb3RlUGVlcihyZW1vdGVQZWVyKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGhhbmdVcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIHNlbmQgc29ja2V0IG1lc3NhZ2VcclxuICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgdG9waWM6ICdjYWxsLmhhbmd1cCcsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgV2ViUlRDU3J2LmNsb3NlQ29ubmVjdGlvbigpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLSBBcHAgaW5pdGlhbGl6YXRpb24gLS0tLS0tLS0tLS0tXHJcbiAgICBTb2NrZXRTcnYuY29ubmVjdCgpO1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tIFNjb3BlIG1ldGhvZHMgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuaXNMb2dnZWRJbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB1c2VyLnVzZXJuYW1lICE9PSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUudXNlck9iaiA9IHt9O1xyXG4gICAgJHNjb3BlLmNoYXQgPSB7XHJcbiAgICAgICAgbWVzc2FnZTogXCJcIixcclxuICAgICAgICBoaXN0b3J5OiBbXVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbihpc1ZhbGlkKSB7XHJcbiAgICAgICAgaWYgKGlzVmFsaWQpIHtcclxuICAgICAgICAgICAgdXNlci51c2VybmFtZSA9ICRzY29wZS51c2VyT2JqLnVzZXJuYW1lO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVnaXN0ZXIgdXNlcm5hbWUgd2l0aCBzb2NrZXQgc2VydmljZVxyXG4gICAgICAgICAgICBTb2NrZXRTcnYucmVnaXN0ZXIodXNlci51c2VybmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgTG9nU3J2LmVycm9yKCdGb3JtIG5vdCB2YWxpZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnVzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnBlZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFNvY2tldFNydi5nZXRVc2VycygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0SW5mb01lc3NhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdWlNZXNzYWdlO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0UmVtb3RlUGVlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiByZW1vdGVQZWVyO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuY2FsbFVzZXIgPSBjYWxsVXNlcjtcclxuICAgICRzY29wZS53aXRoZHJhd0NhbGwgPSB3aXRoZHJhd0NhbGw7XHJcbiAgICAkc2NvcGUucmVqZWN0Q2FsbCA9IHJlamVjdENhbGw7XHJcbiAgICAkc2NvcGUuYWNjZXB0Q2FsbCA9IGFjY2VwdENhbGw7XHJcbiAgICAkc2NvcGUuaGFuZ1VwID0gaGFuZ1VwO1xyXG4gICAgJHNjb3BlLmlzQ29ubmVjdGVkID0gV2ViUlRDU3J2LmlzQ29ubmVjdGVkO1xyXG4gICAgJHNjb3BlLnNlbmRDaGF0TWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBtZXNzYWdlT2JqID0ge1xyXG4gICAgICAgICAgICBhdXRob3I6IHVzZXIudXNlcm5hbWUsXHJcbiAgICAgICAgICAgIHRleHQ6ICRzY29wZS5jaGF0Lm1lc3NhZ2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtZXNzYWdlID0ge1xyXG4gICAgICAgICAgICB0b3BpYzogJ2NoYXQubWVzc2FnZScsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IG1lc3NhZ2VPYmpcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBXZWJSVENTcnYuc2VuZERhdGFDaGFubmVsTWVzc2FnZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XHJcblxyXG4gICAgICAgICRzY29wZS5jaGF0Lmhpc3RvcnkudW5zaGlmdChtZXNzYWdlT2JqKTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmNoYXQubWVzc2FnZSA9IFwiXCI7XHJcblxyXG4gICAgICAgIEZvY3VzU3J2KCdjaGF0TWVzc2FnZScpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUub25LZXlQcmVzcyA9IGZ1bmN0aW9uKGtleUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGtleUV2ZW50LndoaWNoID09PSAxMykge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VuZENoYXRNZXNzYWdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBGb2N1c1NydigndXNlcm5hbWUnKTtcclxuXHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gRXZlbnQgaGFuZGxpbmcgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuJG9uKCdjYWxsLm9mZmVyJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyBsb29rIHVwIHVzZXJcclxuICAgICAgICByZW1vdGVQZWVyID0gU29ja2V0U3J2LmZpbmRVc2VyQnlJZChkYXRhLmZyb20pO1xyXG5cclxuICAgICAgICAvLyBzZXQgdWkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9ICdjYWxsLmluY29taW5nJztcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS4kb24oJ2NhbGwud2l0aGRyYXduJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyByZXNldCByZW1vdGUgcGVlclxyXG4gICAgICAgIHJlbW90ZVBlZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBzZXQgdWkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9IG51bGw7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdjYWxsLnJlamVjdGVkJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyByZXNldCByZW1vdGUgcGVlclxyXG4gICAgICAgIHJlbW90ZVBlZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBzZXQgdWkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9IG51bGw7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdjYWxsLmFjY2VwdGVkJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyBzZXQgdWkgbWVzc2FnZVxyXG4gICAgICAgIHVpTWVzc2FnZSA9ICdjYWxsLmFjY2VwdGVkJztcclxuXHJcbiAgICAgICAgLy8gc2V0IHJlbW90ZSBwZWVyIGluIFdlYlJUQyBzZXJ2aWNlXHJcbiAgICAgICAgV2ViUlRDU3J2LnNldFJlbW90ZVBlZXIocmVtb3RlUGVlcik7XHJcblxyXG4gICAgICAgIC8vIGVzdGFibGlzaCBXZWJSVEMgY29ubmVjdGlvblxyXG4gICAgICAgIFdlYlJUQ1Nydi5lc3RhYmxpc2hDb25uZWN0aW9uKHtcclxuICAgICAgICAgICAgaW5pdGlhdG9yOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdjYWxsLmhhbmd1cCcsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgV2ViUlRDU3J2LmNsb3NlQ29ubmVjdGlvbigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbignd2VicnRjLmNvbm5lY3RlZCcsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gc2V0IHVpIG1lc3NhZ2VcclxuICAgICAgICAgICAgdWlNZXNzYWdlID0gbnVsbDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgRm9jdXNTcnYoJ2NoYXRNZXNzYWdlJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCd3ZWJydGMuZGlzY29ubmVjdGVkJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgLy8gc2V0IHVpIG1lc3NhZ2VcclxuICAgICAgICAgICB1aU1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdjaGF0Lm1lc3NhZ2UnLCBmdW5jdGlvbihldmVudCwgbWVzc2FnZSkge1xyXG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jaGF0Lmhpc3RvcnkudW5zaGlmdChtZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwbGFpbi13ZWJydGMnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ1JlYWxUaW1lVmlkZW9Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcblxyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGxhaW4td2VicnRjJylcclxuICAgIC5kaXJlY3RpdmUoJ3JlYWxUaW1lVmlkZW8nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx2aWRlbyBjbGFzcz1cInZpZGVvXCI+PC92aWRlbz4nLFxyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVhbFRpbWVWaWRlb0NvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCd2aWRlbycpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB2aWRlb1dpZHRoLCB2aWRlb0hlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICB2aWRlby5hdXRvcGxheSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2aWRlby5zcmNPYmplY3QgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIHZpZGVvLm9ubG9hZGVkbWV0YWRhdGEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWRlb1dpZHRoID0gdGhpcy52aWRlb1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvSGVpZ2h0ID0gdGhpcy52aWRlb0hlaWdodDtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgc2NvcGUuJG9uKCd3ZWJydGMuY29ubmVjdGVkJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWRlby5zcmNPYmplY3QgPSBkYXRhLnN0cmVhbTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGxhaW4td2VicnRjJylcclxuICAgIC5mYWN0b3J5KCdGb2N1c1NydicsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkd2luZG93KSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIC8vIHRpbWVvdXQgbWFrZXMgc3VyZSB0aGF0IGlzIGludm9rZWQgYWZ0ZXIgYW55IG90aGVyIGV2ZW50IGhhcyBiZWVuIHRyaWdnZXJlZC5cclxuICAgICAgICAgICAgLy8gZS5nLiBjbGljayBldmVudHMgdGhhdCBuZWVkIHRvIHJ1biBiZWZvcmUgdGhlIGZvY3VzIG9yXHJcbiAgICAgICAgICAgIC8vIGlucHV0cyBlbGVtZW50cyB0aGF0IGFyZSBpbiBhIGRpc2FibGVkIHN0YXRlIGJ1dCBhcmUgZW5hYmxlZCB3aGVuIHRob3NlIGV2ZW50c1xyXG4gICAgICAgICAgICAvLyBhcmUgdHJpZ2dlcmVkLlxyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gJHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwbGFpbi13ZWJydGMnKVxyXG4gICAgLmZhY3RvcnkoJ0xvZ1NydicsIGZ1bmN0aW9uKEFwcENvbmZpZykge1xyXG4gICAgICAgIHZhciBsb2dJbmZvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChBcHBDb25maWdbXCJsb2cuaW5mb1wiXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoQXBwQ29uZmlnW1wibG9nLmVycm9yXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbmZvOiBsb2dJbmZvLFxyXG4gICAgICAgICAgICBlcnJvcjogbG9nRXJyb3JcclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgncGxhaW4td2VicnRjJylcbiAgICAuZmFjdG9yeSgnU29ja2V0U3J2JywgZnVuY3Rpb24oJHJvb3RTY29wZSwgTG9nU3J2KSB7XG4gICAgICAgIHZhciBzb2NrZXQgPSBudWxsO1xuICAgICAgICB2YXIgdXNlcnMgPSBbXTtcbiAgICAgICAgdmFyIG93bklkID0gbnVsbDtcblxuICAgICAgICB2YXIgb24gPSBmdW5jdGlvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzb2NrZXQub24oZXZlbnROYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShzb2NrZXQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzb2NrZXQuZW1pdChldmVudE5hbWUsIGRhdGEsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoc29ja2V0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNvbm5lY3QgdG8gU29ja2V0LmlvIHNlcnZlclxuICAgICAgICAgICAgc29ja2V0ID0gaW8uY29ubmVjdCgpO1xuXG4gICAgICAgICAgICBMb2dTcnYuaW5mbygnU29ja2V0IGNvbm5lY3RlZCcpO1xuXG4gICAgICAgICAgICBvbignaWQnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgb3duSWQgPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9uKCd1c2Vycy51cGRhdGUnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VVc2VyQXJyYXkoZGF0YSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb24oJ21zZycsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9waWMgPSBkYXRhLnRvcGljO1xuXG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEudG9waWM7XG5cbiAgICAgICAgICAgICAgICAvLyBwdWJsaXNoIHJlbGF5IG1lc3NhZ2Ugb24gcm9vdCBzY29wZVxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCh0b3BpYywgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcGFyc2VVc2VyQXJyYXkgPSBmdW5jdGlvbihfdXNlcnMpIHtcbiAgICAgICAgICAgIHVzZXJzID0gX3VzZXJzLmZpbHRlcihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXIuaWQgIT09IG93bklkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdyZWdpc3RlcicsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdtc2cnLCBtZXNzYWdlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZmluZFVzZXJCeUlkID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHZhciB1c2VyID0gbnVsbDtcblxuICAgICAgICAgICAgdXNlcnMuZm9yRWFjaChmdW5jdGlvbih1KSB7XG4gICAgICAgICAgICAgICAgaWYgKHUuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXIgPSB1O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29ubmVjdDogY29ubmVjdCxcbiAgICAgICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICAgICAgICAgIGZpbmRVc2VyQnlJZDogZmluZFVzZXJCeUlkLFxuICAgICAgICAgICAgc2VuZE1lc3NhZ2U6IHNlbmRNZXNzYWdlLFxuICAgICAgICAgICAgZ2V0VXNlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdwbGFpbi13ZWJydGMnKVxyXG4gICAgLmZhY3RvcnkoJ1dlYlJUQ1NydicsIGZ1bmN0aW9uKCRyb290U2NvcGUsIExvZ1NydiwgU29ja2V0U3J2KSB7XHJcbiAgICAgICAgdmFyIGxvY2FsU3RyZWFtID0gbnVsbDtcclxuICAgICAgICB2YXIgcmVtb3RlU3RyZWFtID0gbnVsbDtcclxuICAgICAgICB2YXIgcGVlckNvbm5lY3Rpb24gPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgZGF0YUNoYW5uZWwgPSBudWxsO1xyXG4gICAgICAgIHZhciBkYXRhQ2hhbm5lbE5hbWUgPSAncGxhaW4td2VicnRjLWNoYW5uZWwnO1xyXG5cclxuICAgICAgICB2YXIgcmVtb3RlUGVlciA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIFNlcnZpY2UgY29uZmlndXJhdGlvblxyXG4gICAgICAgIHZhciBjb25maWcgPSB7XHJcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uQ29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IElDRSBzZXJ2ZXIgY29uZmlndXJhdGlvbiwgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSBYSVJTWVMgQVBJIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICBpY2VTZXJ2ZXJzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1widXJsc1wiOiBbXCJzdHVuOjIzLjIxLjE1MC4xMjFcIl19LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcInVybHNcIjogW1wic3R1bjpzdHVuLmwuZ29vZ2xlLmNvbToxOTMwMlwiXX0sXHJcbiAgICAgICAgICAgICAgICAgICAge1widXJsc1wiOiBbXCJ0dXJuOm51bWIudmlhZ2VuaWUuY2E/dHJhbnNwb3J0PXVkcFwiXSwgXCJ1c2VybmFtZVwiOiBcIm1pY2hhZWwuc3RpZnRlckBldm9sYXJpcy5uZXRcIiwgXCJjcmVkZW50aWFsXCI6IFwiMTV1RmJ1Q3hhektyTXpvZzJXbk1cIn0sXHJcbiAgICAgICAgICAgICAgICAgICAge1widXJsc1wiOiBbXCJ0dXJuOm51bWIudmlhZ2VuaWUuY2E/dHJhbnNwb3J0PXRjcFwiXSwgXCJ1c2VybmFtZVwiOiBcIm1pY2hhZWwuc3RpZnRlckBldm9sYXJpcy5uZXRcIiwgXCJjcmVkZW50aWFsXCI6IFwiMTV1RmJ1Q3hhektyTXpvZzJXbk1cIn1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb25Db25zdHJhaW50czoge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XCJEdGxzU3J0cEtleUFncmVlbWVudFwiOiB0cnVlfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2VyTWVkaWFDb25zdHJhaW50czoge1xyXG4gICAgICAgICAgICAgICAgYXVkaW86IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2aWRlbzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0ODAsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzNjBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKGNvbmZpZy5wZWVyQ29ubmVjdGlvbkNvbmZpZywgY29uZmlnLnBlZXJDb25uZWN0aW9uQ29uc3RyYWludHMpO1xyXG5cclxuICAgICAgICAgICAgTG9nU3J2LmluZm8oXCItLS0gcGVlciBjb25uZWN0aW9uIGNyZWF0ZWQgLS0tXCIsIGNvbmZpZy5wZWVyQ29ubmVjdGlvbkNvbmZpZywgY29uZmlnLnBlZXJDb25uZWN0aW9uQ29uc3RyYWludHMpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkU3RyZWFtKGxvY2FsU3RyZWFtKTtcclxuICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBsb2NhbCBzdHJlYW0gYWRkZWQgLS0tJyk7XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5vbmFkZHN0cmVhbSA9IGhhbmRsZVJlbW90ZVN0cmVhbUFkZGVkO1xyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5vbnJlbW92ZXN0cmVhbSA9IGhhbmRsZVJlbW90ZVN0cmVhbVJlbW92ZWQ7XHJcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24ub25pY2VjYW5kaWRhdGUgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmNhbmRpZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFNvY2tldFNydi5zZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiByZW1vdGVQZWVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BpYzogJ3dlYnJ0Yy5jYW5kaWRhdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogZXZlbnQuY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZXZlbnQuY2FuZGlkYXRlLnNkcE1pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZTogZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5vbmRhdGFjaGFubmVsID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gZGF0YSBjaGFubmVsIHJlY2VpdmVkIC0tLScsIGV2ZW50LmNoYW5uZWwpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsID0gZXZlbnQuY2hhbm5lbDtcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbC5vbm9wZW4gPSBoYW5kbGVEYXRhQ2hhbm5lbFN0YXRlQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwub25tZXNzYWdlID0gaGFuZGxlRGF0YUNoYW5uZWxNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwub25jbG9zZSA9IGhhbmRsZURhdGFDaGFubmVsU3RhdGVDaGFuZ2U7XHJcbiAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbC5vbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKCdkYXRhIGNoYW5uZWwgZXJyb3InLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG9mZmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gY3JlYXRpbmcgb2ZmZXIgLS0tJyk7XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcigpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihzZXNzaW9uRGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKHNlc3Npb25EZXNjcmlwdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFNvY2tldFNydi5zZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiByZW1vdGVQZWVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BpYzogJ3dlYnJ0Yy5vZmZlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHNlc3Npb25EZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBvZmZlcicsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgYW5zd2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gY3JlYXRpbmcgYW5zd2VyIC0tLScpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uY3JlYXRlQW5zd2VyKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHNlc3Npb25EZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLnNldExvY2FsRGVzY3JpcHRpb24oc2Vzc2lvbkRlc2NyaXB0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgU29ja2V0U3J2LnNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHJlbW90ZVBlZXIuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcGljOiAnd2VicnRjLmFuc3dlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHNlc3Npb25EZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBzZXQgbG9jYWwgZGVzY3JpcHRpb24nLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZVJlbW90ZVN0cmVhbUFkZGVkID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgTG9nU3J2LmluZm8oXCItLS0gcmVtb3RlIHN0cmVhbSBhZGRlZCAtLS1cIik7XHJcblxyXG4gICAgICAgICAgICBldmVudC5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oXCJSRU1PVEUgU1RSRUFNIFRSQUNLXCIsIHRyYWNrKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBzYXZlIHJlbW90ZSBzdHJlYW0gcmVmZXJlbmNlXHJcbiAgICAgICAgICAgIHJlbW90ZVN0cmVhbSA9IGV2ZW50LnN0cmVhbTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlUmVtb3RlU3RyZWFtUmVtb3ZlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKFwiLS0tIHJlbW90ZSBzdHJlYW0gcmVtb3ZlZCAtLS1cIik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IChldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50LnRhcmdldCkuaWNlQ29ubmVjdGlvblN0YXRlOyAgLy8gYmVjYXVzZSBvZiBkaWZmZXJlbmNlcyBiZXR3ZWVuIENocm9tZSBhbmQgRmlyZWZveFxyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY29ubmVjdGVkJzpcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIGNvbm5lY3RlZCAtLS0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3ZWJydGMuY29ubmVjdGVkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW06IHJlbW90ZVN0cmVhbVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdjbG9zZWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gY2xvc2VkIC0tLScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3dlYnJ0Yy5kaXNjb25uZWN0ZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIGRpc2Nvbm5lY3RlZCAtLS0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3ZWJydGMuZGlzY29ubmVjdGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlV2ViUlRDQ29ubmVjdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcignLS0tIGZhaWxlZCAtLS0nLCBldmVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbGVhc2UgbWVkaWEgYWNjZXNzIChyZXR1cm5zIGEgcHJvbWlzZSlcclxuICAgICAgICAgICAgICAgICAgICByZWxlYXNlTWVkaWFBY2Nlc3MoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIElDRSBjb25uZWN0aW9uIHN0YXRlIGNoYW5nZSAtLS0nLCBzdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlRGF0YUNoYW5uZWxTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIGRhdGEgY2hhbm5lbCBzdGF0ZTogJyArIGRhdGFDaGFubmVsLnJlYWR5U3RhdGUgKyAnIC0tLScpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVEYXRhQ2hhbm5lbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIGRhdGEgY2hhbm5lbCBtZXNzYWdlIC0tLScsIG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KG1lc3NhZ2UudG9waWMsIG1lc3NhZ2UucGF5bG9hZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlcXVlc3RNZWRpYUFjY2VzcyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgLm1lZGlhRGV2aWNlc1xyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRVc2VyTWVkaWEoY29uZmlnLnVzZXJNZWRpYUNvbnN0cmFpbnRzKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKG1lZGlhU3RyZWFtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RyZWFtID0gbWVkaWFTdHJlYW07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbyhcIi0tLSBnb3QgbWVkaWEgYWNjZXNzIC0tLVwiLCBjb25maWcudXNlck1lZGlhQ29uc3RyYWludHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShsb2NhbFN0cmVhbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcignRmFpbGVkIHRvIG9idGFpbiBtZWRpYSBhY2Nlc3MgZm9yIG9wdGlvbnMnLCBjb25maWcudXNlck1lZGlhQ29uc3RyYWludHMsIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmVsZWFzZU1lZGlhQWNjZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlc29sdmUgcHJvbWlzZSBpbW1lZGlhdGVseSBpZiBtZWRpYSBhY2Nlc3MgaGFzIGFscmVhZHkgYmVlbiByZWxlYXNlZFxyXG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsU3RyZWFtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0cmFja3MgPSBsb2NhbFN0cmVhbS5nZXRUcmFja3MoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGxvY2FsU3RyZWFtID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBlc3RhYmxpc2hDb25uZWN0aW9uID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXF1ZXN0TWVkaWFBY2Nlc3MoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VuZCBpbml0IG1lc3NhZ2UgdG8gcmVtb3RlIHBlZXJcclxuICAgICAgICAgICAgICAgICAgICBTb2NrZXRTcnYuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogcmVtb3RlUGVlci5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9waWM6ICd3ZWJydGMuaW5pdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5pdCBwZWVyIGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBoYW5ndXAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHBlZXJDb25uZWN0aW9uICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBsb2NhbFN0cmVhbSA9IG51bGw7XHJcbiAgICAgICAgICAgIHJlbW90ZVN0cmVhbSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNsb3NlV2ViUlRDQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAocGVlckNvbm5lY3Rpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gY2xvc2luZyBXZWJSVEMgY29ubmVjdGlvbiAtLS0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZWxlYXNlTWVkaWFBY2Nlc3MoKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5ndXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlbW90ZVBlZXIobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2V0UmVtb3RlUGVlciA9IGZ1bmN0aW9uKHBlZXIpIHtcclxuICAgICAgICAgICAgcmVtb3RlUGVlciA9IHBlZXI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGlzQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwZWVyQ29ubmVjdGlvbiAhPT0gbnVsbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2VuZERhdGFDaGFubmVsTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFDaGFubmVsICE9PSBudWxsICYmIGRhdGFDaGFubmVsLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xyXG4gICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwuc2VuZChtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCd3ZWJydGMuaW5pdCcsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gcmVjZWl2ZWQgV2ViUlRDIGluaXQgLS0tJyk7XHJcblxyXG4gICAgICAgICAgICByZXF1ZXN0TWVkaWFBY2Nlc3MoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5pdCBwZWVyIGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICBpbml0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9wZW4gZGF0YSBjaGFubmVsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwgPSBwZWVyQ29ubmVjdGlvbi5jcmVhdGVEYXRhQ2hhbm5lbChkYXRhQ2hhbm5lbE5hbWUsIHsgcmVsaWFibGU6IHRydWUgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIGRhdGEgY2hhbm5lbCBjcmVhdGVkIC0tLScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwub25vcGVuID0gaGFuZGxlRGF0YUNoYW5uZWxTdGF0ZUNoYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwub25tZXNzYWdlID0gaGFuZGxlRGF0YUNoYW5uZWxNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbC5vbmNsb3NlID0gaGFuZGxlRGF0YUNoYW5uZWxTdGF0ZUNoYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwub25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKCdkYXRhIGNoYW5uZWwgZXJyb3InLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKCdmYWlsZWQgdG8gY3JlYXRlIGRhdGEgY2hhbm5lbCcsIGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VuZCBzZXNzaW9uIGRlc2NyaXB0aW9uIG9mZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgb2ZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCd3ZWJydGMub2ZmZXInLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICBMb2dTcnYuaW5mbygnLS0tIHJlY2VpdmVkIG9mZmVyIC0tLScsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihkYXRhLnBheWxvYWQpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uIC0tLScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIGFuc3dlclxyXG4gICAgICAgICAgICAgICAgICAgIGFuc3dlcigpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uJywgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRvbignd2VicnRjLmFuc3dlcicsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKCctLS0gcmVjZWl2ZWQgYW5zd2VyIC0tLScsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihkYXRhLnBheWxvYWQpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uIC0tLScpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBzZXQgcmVtb3RlIGRlc2NyaXB0aW9uJywgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRvbignd2VicnRjLmNhbmRpZGF0ZScsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChwZWVyQ29ubmVjdGlvbi5yZW1vdGVEZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkSWNlQ2FuZGlkYXRlKG5ldyBSVENJY2VDYW5kaWRhdGUoZGF0YS5wYXlsb2FkKSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJy0tLSBhZGRlZCBJQ0UgY2FuZGlkYXRlIC0tLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoJ2ZhaWxlZCB0byBhZGQgSUNFIGNhbmRpZGF0ZScsIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5pdDogaW5pdCxcclxuICAgICAgICAgICAgZXN0YWJsaXNoQ29ubmVjdGlvbjogZXN0YWJsaXNoQ29ubmVjdGlvbixcclxuICAgICAgICAgICAgY2xvc2VDb25uZWN0aW9uOiBjbG9zZVdlYlJUQ0Nvbm5lY3Rpb24sXHJcbiAgICAgICAgICAgIHNldFJlbW90ZVBlZXI6IHNldFJlbW90ZVBlZXIsXHJcbiAgICAgICAgICAgIGlzQ29ubmVjdGVkOiBpc0Nvbm5lY3RlZCxcclxuICAgICAgICAgICAgc2VuZERhdGFDaGFubmVsTWVzc2FnZTogc2VuZERhdGFDaGFubmVsTWVzc2FnZVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
