var app=angular.module("plain-webrtc",["ui.router","ngMessages"]);app.constant("AppConfig",{"log.info":!0,"log.error":!0}),app.controller("AppCtrl",["$scope","LogSrv","SocketSrv","FocusSrv",function(n,o,r,e){var t={username:null};r.connect(),n.isLoggedIn=function(){return null!==t.username},n.userObj={},n.login=function(e){e?(t.username=n.userObj.username,o.info(t),r.register(t.username)):o.error("Form not valid")},n.user=function(){return t},e("username")}]),angular.module("plain-webrtc").factory("FocusSrv",["$timeout","$window",function(n,o){return function(r){n(function(){var n=o.document.getElementById(r);n&&n.focus()})}}]),angular.module("plain-webrtc").factory("LogSrv",["AppConfig",function(n){var o=function(){n["log.info"]&&console.log.apply(console,arguments)},r=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:o,error:r}}]),angular.module("plain-webrtc").factory("SocketSrv",["LogSrv",function(n){var o=null,r=function(){o=io.connect(),n.info("Socket connected")},e=function(n){o.emit("register",{username:n})};return{connect:r,register:e}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNlcnZpY2VzL2ZvY3VzLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9sb2cuc2VydmljZS5qcyIsInNlcnZpY2VzL3NvY2tldC5pby5jbGllbnQuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uc3RhbnQiLCJsb2cuaW5mbyIsImxvZy5lcnJvciIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJMb2dTcnYiLCJTb2NrZXRTcnYiLCJGb2N1c1NydiIsInVzZXIiLCJ1c2VybmFtZSIsImNvbm5lY3QiLCJpc0xvZ2dlZEluIiwidXNlck9iaiIsImxvZ2luIiwiaXNWYWxpZCIsImluZm8iLCJyZWdpc3RlciIsImVycm9yIiwiZmFjdG9yeSIsIiR0aW1lb3V0IiwiJHdpbmRvdyIsImlkIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJmb2N1cyIsIkFwcENvbmZpZyIsImxvZ0luZm8iLCJjb25zb2xlIiwibG9nIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJsb2dFcnJvciIsInNvY2tldCIsImlvIiwiZW1pdCJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsS0FBQUMsUUFBQUMsT0FBQSxnQkFDQSxZQUNBLGNBSUFGLEtBQUFHLFNBQUEsYUFDQUMsWUFBQSxFQUNBQyxhQUFBLElBR0FMLElBQUFNLFdBQUEsV0FBQSxTQUFBLFNBQUEsWUFBQSxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBRUEsR0FBQUMsSUFDQUMsU0FBQSxLQUlBSCxHQUFBSSxVQUdBTixFQUFBTyxXQUFBLFdBQ0EsTUFBQSxRQUFBSCxFQUFBQyxVQUdBTCxFQUFBUSxXQUVBUixFQUFBUyxNQUFBLFNBQUFDLEdBQ0FBLEdBQ0FOLEVBQUFDLFNBQUFMLEVBQUFRLFFBQUFILFNBQ0FKLEVBQUFVLEtBQUFQLEdBR0FGLEVBQUFVLFNBQUFSLEVBQUFDLFdBRUFKLEVBQUFZLE1BQUEsbUJBSUFiLEVBQUFJLEtBQUEsV0FDQSxNQUFBQSxJQUdBRCxFQUFBLGVDekNBVCxRQUNBQyxPQUFBLGdCQUNBbUIsUUFBQSxZQUFBLFdBQUEsVUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUEsVUFBQUMsR0FLQUYsRUFBQSxXQUNBLEdBQUFHLEdBQUFGLEVBQUFHLFNBQUFDLGVBQUFILEVBRUFDLElBQ0FBLEVBQUFHLGNDWkEzQixRQUNBQyxPQUFBLGdCQUNBbUIsUUFBQSxVQUFBLFlBQUEsU0FBQVEsR0FDQSxHQUFBQyxHQUFBLFdBQ0FELEVBQUEsYUFDQUUsUUFBQUMsSUFBQUMsTUFBQUYsUUFBQUcsWUFJQUMsRUFBQSxXQUNBTixFQUFBLGNBQ0FFLFFBQUFYLE1BQUFhLE1BQUFGLFFBQUFHLFdBSUEsUUFDQWhCLEtBQUFZLEVBQ0FWLE1BQUFlLE1DakJBbEMsUUFBQUMsT0FBQSxnQkFDQW1CLFFBQUEsYUFBQSxTQUFBLFNBQUFiLEdBQ0EsR0FBQTRCLEdBQUEsS0FFQXZCLEVBQUEsV0FFQXVCLEVBQUFDLEdBQUF4QixVQUVBTCxFQUFBVSxLQUFBLHFCQUdBQyxFQUFBLFNBQUFQLEdBQ0F3QixFQUFBRSxLQUFBLFlBQ0ExQixTQUFBQSxJQUlBLFFBQ0FDLFFBQUFBLEVBQ0FNLFNBQUFBIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZShcInBsYWluLXdlYnJ0Y1wiLCBbXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICduZ01lc3NhZ2VzJ1xyXG5dKTtcclxuXHJcbi8vIGRlZmluZSBhcHBsaWNhdGlvbiBjb25zdGFudHNcclxuYXBwLmNvbnN0YW50KFwiQXBwQ29uZmlnXCIsIHtcclxuICAgIFwibG9nLmluZm9cIjogdHJ1ZSxcclxuICAgIFwibG9nLmVycm9yXCI6IHRydWVcclxufSk7XHJcblxyXG5hcHAuY29udHJvbGxlcihcIkFwcEN0cmxcIiwgZnVuY3Rpb24oJHNjb3BlLCBMb2dTcnYsIFNvY2tldFNydiwgRm9jdXNTcnYpIHtcclxuICAgIC8vIC0tLS0tLS0tLS0tIEFwcCBjb25maWcgLS0tLS0tLS0tLS0tXHJcbiAgICB2YXIgdXNlciA9IHtcclxuICAgICAgICB1c2VybmFtZTogbnVsbFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLSBBcHAgaW5pdGlhbGl6YXRpb24gLS0tLS0tLS0tLS0tXHJcbiAgICBTb2NrZXRTcnYuY29ubmVjdCgpO1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tIFNjb3BlIG1ldGhvZHMgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuaXNMb2dnZWRJbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB1c2VyLnVzZXJuYW1lICE9PSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUudXNlck9iaiA9IHt9O1xyXG5cclxuICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKGlzVmFsaWQpIHtcclxuICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICB1c2VyLnVzZXJuYW1lID0gJHNjb3BlLnVzZXJPYmoudXNlcm5hbWU7XHJcbiAgICAgICAgICAgIExvZ1Nydi5pbmZvKHVzZXIpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVnaXN0ZXIgdXNlcm5hbWUgd2l0aCBzb2NrZXQgc2VydmljZVxyXG4gICAgICAgICAgICBTb2NrZXRTcnYucmVnaXN0ZXIodXNlci51c2VybmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgTG9nU3J2LmVycm9yKCdGb3JtIG5vdCB2YWxpZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnVzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgIH07XHJcblxyXG4gICAgRm9jdXNTcnYoJ3VzZXJuYW1lJyk7XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gRXZlbnQgaGFuZGxpbmcgLS0tLS0tLS0tLS0tXHJcblxyXG59KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwbGFpbi13ZWJydGMnKVxyXG4gICAgLmZhY3RvcnkoJ0ZvY3VzU3J2JywgZnVuY3Rpb24oJHRpbWVvdXQsICR3aW5kb3cpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgLy8gdGltZW91dCBtYWtlcyBzdXJlIHRoYXQgaXMgaW52b2tlZCBhZnRlciBhbnkgb3RoZXIgZXZlbnQgaGFzIGJlZW4gdHJpZ2dlcmVkLlxyXG4gICAgICAgICAgICAvLyBlLmcuIGNsaWNrIGV2ZW50cyB0aGF0IG5lZWQgdG8gcnVuIGJlZm9yZSB0aGUgZm9jdXMgb3JcclxuICAgICAgICAgICAgLy8gaW5wdXRzIGVsZW1lbnRzIHRoYXQgYXJlIGluIGEgZGlzYWJsZWQgc3RhdGUgYnV0IGFyZSBlbmFibGVkIHdoZW4gdGhvc2UgZXZlbnRzXHJcbiAgICAgICAgICAgIC8vIGFyZSB0cmlnZ2VyZWQuXHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAkd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BsYWluLXdlYnJ0YycpXHJcbiAgICAuZmFjdG9yeSgnTG9nU3J2JywgZnVuY3Rpb24oQXBwQ29uZmlnKSB7XHJcbiAgICAgICAgdmFyIGxvZ0luZm8gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKEFwcENvbmZpZ1tcImxvZy5pbmZvXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvZ0Vycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChBcHBDb25maWdbXCJsb2cuZXJyb3JcIl0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGluZm86IGxvZ0luZm8sXHJcbiAgICAgICAgICAgIGVycm9yOiBsb2dFcnJvclxyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdwbGFpbi13ZWJydGMnKVxuICAgIC5mYWN0b3J5KCdTb2NrZXRTcnYnLCBmdW5jdGlvbihMb2dTcnYpIHtcbiAgICAgICAgdmFyIHNvY2tldCA9IG51bGw7XG5cbiAgICAgICAgdmFyIGNvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNvbm5lY3QgdG8gU29ja2V0LmlvIHNlcnZlclxuICAgICAgICAgICAgc29ja2V0ID0gaW8uY29ubmVjdCgpO1xuXG4gICAgICAgICAgICBMb2dTcnYuaW5mbygnU29ja2V0IGNvbm5lY3RlZCcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG4gICAgICAgICAgICBzb2NrZXQuZW1pdCgncmVnaXN0ZXInLCB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29ubmVjdDogY29ubmVjdCxcbiAgICAgICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlclxuICAgICAgICB9O1xuICAgIH0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
