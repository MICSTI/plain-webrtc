var app=angular.module("plain-webrtc",["ui.router","ngMessages"]);app.constant("AppConfig",{"log.info":!0,"log.error":!0}),app.controller("AppCtrl",["$scope","LogSrv","SocketSrv","FocusSrv",function(n,e,o,t){var r={username:null},c=null,l=null,u=function(n){c=n,o.sendMessage({to:c.id,topic:"call.offer",payload:{}}),l="call.outgoing"},a=function(){o.sendMessage({to:c.id,topic:"call.withdrawn",payload:{}}),c=null,l=null},i=function(){o.sendMessage({to:c.id,topic:"call.rejected",payload:{}}),c=null,l=null},f=function(){o.sendMessage({to:c.id,topic:"call.accepted",payload:{}}),l="call.accepted"};o.connect(),n.isLoggedIn=function(){return null!==r.username},n.userObj={},n.login=function(t){t?(r.username=n.userObj.username,e.info(r),o.register(r.username)):e.error("Form not valid")},n.user=function(){return r},n.peers=function(){return o.getUsers()},n.getInfoMessage=function(){return l},n.getRemotePeer=function(){return c},n.callUser=u,n.withdrawCall=a,n.rejectCall=i,n.acceptCall=f,t("username"),n.$on("call.offer",function(n,e){c=o.findUserById(e.from),l="call.incoming"}),n.$on("call.withdrawn",function(n,e){c=null,l=null}),n.$on("call.rejected",function(n,e){c=null,l=null}),n.$on("call.accepted",function(n,e){l="call.accepted"})}]),angular.module("plain-webrtc").factory("FocusSrv",["$timeout","$window",function(n,e){return function(o){n(function(){var n=e.document.getElementById(o);n&&n.focus()})}}]),angular.module("plain-webrtc").factory("LogSrv",["AppConfig",function(n){var e=function(){n["log.info"]&&console.log.apply(console,arguments)},o=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:e,error:o}}]),angular.module("plain-webrtc").factory("SocketSrv",["$rootScope","LogSrv",function(n,e){var o=null,t=[],r=null,c=function(e,t){o.on(e,function(){var e=arguments;n.$apply(function(){t.apply(o,e)})})},l=function(){o=io.connect(),e.info("Socket connected"),c("id",function(n){r=n}),c("users.update",function(n){u(n)}),c("msg",function(e){var o=e.topic;delete e.topic,n.$broadcast(o,e)})},u=function(n){t=n.filter(function(n){return n.id!==r})},a=function(n){o.emit("register",{username:n})},i=function(n){o.emit("msg",n)},f=function(n){var e=null;return t.forEach(function(o){o.id===n&&(e=o)}),e};return{connect:l,register:a,findUserById:f,sendMessage:i,getUsers:function(){return t}}}]);
//# sourceMappingURL=data:application/json;base64,
